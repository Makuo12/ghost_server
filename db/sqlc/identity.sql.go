// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: identity.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createIdentity = `-- name: CreateIdentity :exec
INSERT INTO identity (
    user_id,
    id_photo_list,
    id_back_photo_list,
    facial_photo_list
) VALUES ($1, $2, $3, $4)
`

type CreateIdentityParams struct {
	UserID          uuid.UUID `json:"user_id"`
	IDPhotoList     []string  `json:"id_photo_list"`
	IDBackPhotoList []string  `json:"id_back_photo_list"`
	FacialPhotoList []string  `json:"facial_photo_list"`
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) error {
	_, err := q.db.Exec(ctx, createIdentity,
		arg.UserID,
		arg.IDPhotoList,
		arg.IDBackPhotoList,
		arg.FacialPhotoList,
	)
	return err
}

const getIdentity = `-- name: GetIdentity :one
SELECT user_id, country, type, id_photo, id_photo_list, id_back_photo, id_back_photo_list, facial_photo, facial_photo_list, status, is_verified, created_at, updated_at
FROM identity
WHERE user_id = $1
`

func (q *Queries) GetIdentity(ctx context.Context, userID uuid.UUID) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentity, userID)
	var i Identity
	err := row.Scan(
		&i.UserID,
		&i.Country,
		&i.Type,
		&i.IDPhoto,
		&i.IDPhotoList,
		&i.IDBackPhoto,
		&i.IDBackPhotoList,
		&i.FacialPhoto,
		&i.FacialPhotoList,
		&i.Status,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIdentityStatus = `-- name: GetIdentityStatus :one
SELECT status, is_verified
FROM identity
WHERE user_id = $1
`

type GetIdentityStatusRow struct {
	Status     string `json:"status"`
	IsVerified bool   `json:"is_verified"`
}

func (q *Queries) GetIdentityStatus(ctx context.Context, userID uuid.UUID) (GetIdentityStatusRow, error) {
	row := q.db.QueryRow(ctx, getIdentityStatus, userID)
	var i GetIdentityStatusRow
	err := row.Scan(&i.Status, &i.IsVerified)
	return i, err
}

const listIdentityByAdmin = `-- name: ListIdentityByAdmin :many
SELECT user_id, country, type, id_photo, id_photo_list, id_back_photo, id_back_photo_list, facial_photo, facial_photo_list, status, is_verified, created_at, updated_at
FROM identity
`

func (q *Queries) ListIdentityByAdmin(ctx context.Context) ([]Identity, error) {
	rows, err := q.db.Query(ctx, listIdentityByAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Identity{}
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.UserID,
			&i.Country,
			&i.Type,
			&i.IDPhoto,
			&i.IDPhotoList,
			&i.IDBackPhoto,
			&i.IDBackPhotoList,
			&i.FacialPhoto,
			&i.FacialPhotoList,
			&i.Status,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeIdentity = `-- name: RemoveIdentity :exec
DELETE FROM identity
WHERE user_id = $1
`

func (q *Queries) RemoveIdentity(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeIdentity, userID)
	return err
}

const updateIdentity = `-- name: UpdateIdentity :one
UPDATE identity 
SET 
    country = $1,
    type = $2,
    id_photo = $3,
    facial_photo = $4,
    status = $5, 
    is_verified = $6,
    id_photo_list = $7,
    facial_photo_list = $8,
    id_back_photo_list = $9,
    updated_at = NOW()
WHERE user_id = $10
RETURNING status, is_verified
`

type UpdateIdentityParams struct {
	Country         string    `json:"country"`
	Type            string    `json:"type"`
	IDPhoto         string    `json:"id_photo"`
	FacialPhoto     string    `json:"facial_photo"`
	Status          string    `json:"status"`
	IsVerified      bool      `json:"is_verified"`
	IDPhotoList     []string  `json:"id_photo_list"`
	FacialPhotoList []string  `json:"facial_photo_list"`
	IDBackPhotoList []string  `json:"id_back_photo_list"`
	UserID          uuid.UUID `json:"user_id"`
}

type UpdateIdentityRow struct {
	Status     string `json:"status"`
	IsVerified bool   `json:"is_verified"`
}

func (q *Queries) UpdateIdentity(ctx context.Context, arg UpdateIdentityParams) (UpdateIdentityRow, error) {
	row := q.db.QueryRow(ctx, updateIdentity,
		arg.Country,
		arg.Type,
		arg.IDPhoto,
		arg.FacialPhoto,
		arg.Status,
		arg.IsVerified,
		arg.IDPhotoList,
		arg.FacialPhotoList,
		arg.IDBackPhotoList,
		arg.UserID,
	)
	var i UpdateIdentityRow
	err := row.Scan(&i.Status, &i.IsVerified)
	return i, err
}

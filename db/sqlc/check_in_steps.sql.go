// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: check_in_steps.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCheckInStep = `-- name: CreateCheckInStep :one
INSERT INTO check_in_steps (
        option_id,
        photo,
        des
    )
VALUES (
        $1, $2, $3
    )
RETURNING id, option_id, photo, public_photo, des, created_at, updated_at
`

type CreateCheckInStepParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Photo    string    `json:"photo"`
	Des      string    `json:"des"`
}

func (q *Queries) CreateCheckInStep(ctx context.Context, arg CreateCheckInStepParams) (CheckInStep, error) {
	row := q.db.QueryRow(ctx, createCheckInStep, arg.OptionID, arg.Photo, arg.Des)
	var i CheckInStep
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Photo,
		&i.PublicPhoto,
		&i.Des,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCheckInStep = `-- name: GetCheckInStep :one
SELECT des, photo
FROM check_in_steps
WHERE id = $1 AND option_id=$2
`

type GetCheckInStepParams struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

type GetCheckInStepRow struct {
	Des   string `json:"des"`
	Photo string `json:"photo"`
}

func (q *Queries) GetCheckInStep(ctx context.Context, arg GetCheckInStepParams) (GetCheckInStepRow, error) {
	row := q.db.QueryRow(ctx, getCheckInStep, arg.ID, arg.OptionID)
	var i GetCheckInStepRow
	err := row.Scan(&i.Des, &i.Photo)
	return i, err
}

const getCheckInStepByOptionID = `-- name: GetCheckInStepByOptionID :one
SELECT des, photo
FROM check_in_steps
WHERE option_id=$1
`

type GetCheckInStepByOptionIDRow struct {
	Des   string `json:"des"`
	Photo string `json:"photo"`
}

func (q *Queries) GetCheckInStepByOptionID(ctx context.Context, optionID uuid.UUID) (GetCheckInStepByOptionIDRow, error) {
	row := q.db.QueryRow(ctx, getCheckInStepByOptionID, optionID)
	var i GetCheckInStepByOptionIDRow
	err := row.Scan(&i.Des, &i.Photo)
	return i, err
}

const listCheckInStepByAdmin = `-- name: ListCheckInStepByAdmin :many
SELECT id, option_id, photo, public_photo, des, created_at, updated_at
FROM check_in_steps
`

func (q *Queries) ListCheckInStepByAdmin(ctx context.Context) ([]CheckInStep, error) {
	rows, err := q.db.Query(ctx, listCheckInStepByAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CheckInStep{}
	for rows.Next() {
		var i CheckInStep
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.Photo,
			&i.PublicPhoto,
			&i.Des,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCheckInStepOrdered = `-- name: ListCheckInStepOrdered :many
SELECT cs.des, cs.photo, cs.id, s.publish_check_in_steps
FROM check_in_steps cs
    JOIN shortlets s ON s.option_id = cs.option_id
WHERE cs.option_id = $1
ORDER BY cs.created_at
`

type ListCheckInStepOrderedRow struct {
	Des                 string    `json:"des"`
	Photo               string    `json:"photo"`
	ID                  uuid.UUID `json:"id"`
	PublishCheckInSteps bool      `json:"publish_check_in_steps"`
}

func (q *Queries) ListCheckInStepOrdered(ctx context.Context, optionID uuid.UUID) ([]ListCheckInStepOrderedRow, error) {
	rows, err := q.db.Query(ctx, listCheckInStepOrdered, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCheckInStepOrderedRow{}
	for rows.Next() {
		var i ListCheckInStepOrderedRow
		if err := rows.Scan(
			&i.Des,
			&i.Photo,
			&i.ID,
			&i.PublishCheckInSteps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCheckInStep = `-- name: RemoveCheckInStep :exec
DELETE FROM check_in_steps 
WHERE option_id = $1 AND id = $2
`

type RemoveCheckInStepParams struct {
	OptionID uuid.UUID `json:"option_id"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) RemoveCheckInStep(ctx context.Context, arg RemoveCheckInStepParams) error {
	_, err := q.db.Exec(ctx, removeCheckInStep, arg.OptionID, arg.ID)
	return err
}

const removeCheckInStepByOptionID = `-- name: RemoveCheckInStepByOptionID :exec
DELETE FROM check_in_steps 
WHERE option_id = $1
`

func (q *Queries) RemoveCheckInStepByOptionID(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeCheckInStepByOptionID, optionID)
	return err
}

const updateCheckInStepDes = `-- name: UpdateCheckInStepDes :one
UPDATE check_in_steps
    SET des = $1, 
    updated_at = NOW()
WHERE id = $2 AND option_id = $3
RETURNING des, photo, id
`

type UpdateCheckInStepDesParams struct {
	Des      string    `json:"des"`
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

type UpdateCheckInStepDesRow struct {
	Des   string    `json:"des"`
	Photo string    `json:"photo"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCheckInStepDes(ctx context.Context, arg UpdateCheckInStepDesParams) (UpdateCheckInStepDesRow, error) {
	row := q.db.QueryRow(ctx, updateCheckInStepDes, arg.Des, arg.ID, arg.OptionID)
	var i UpdateCheckInStepDesRow
	err := row.Scan(&i.Des, &i.Photo, &i.ID)
	return i, err
}

const updateCheckInStepPhoto = `-- name: UpdateCheckInStepPhoto :one
UPDATE check_in_steps
    SET photo = $1, 
    updated_at = NOW()
WHERE id = $2 AND option_id = $3
RETURNING des, photo, id
`

type UpdateCheckInStepPhotoParams struct {
	Photo    string    `json:"photo"`
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

type UpdateCheckInStepPhotoRow struct {
	Des   string    `json:"des"`
	Photo string    `json:"photo"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCheckInStepPhoto(ctx context.Context, arg UpdateCheckInStepPhotoParams) (UpdateCheckInStepPhotoRow, error) {
	row := q.db.QueryRow(ctx, updateCheckInStepPhoto, arg.Photo, arg.ID, arg.OptionID)
	var i UpdateCheckInStepPhotoRow
	err := row.Scan(&i.Des, &i.Photo, &i.ID)
	return i, err
}

const updateCheckInStepPublicPhoto = `-- name: UpdateCheckInStepPublicPhoto :one
UPDATE check_in_steps
    SET public_photo = $1, 
    updated_at = NOW()
WHERE id = $2
RETURNING des, photo, id
`

type UpdateCheckInStepPublicPhotoParams struct {
	PublicPhoto string    `json:"public_photo"`
	ID          uuid.UUID `json:"id"`
}

type UpdateCheckInStepPublicPhotoRow struct {
	Des   string    `json:"des"`
	Photo string    `json:"photo"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCheckInStepPublicPhoto(ctx context.Context, arg UpdateCheckInStepPublicPhotoParams) (UpdateCheckInStepPublicPhotoRow, error) {
	row := q.db.QueryRow(ctx, updateCheckInStepPublicPhoto, arg.PublicPhoto, arg.ID)
	var i UpdateCheckInStepPublicPhotoRow
	err := row.Scan(&i.Des, &i.Photo, &i.ID)
	return i, err
}

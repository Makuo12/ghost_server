// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: payments_gate_pays.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPaymentGatePay = `-- name: CreatePaymentGatePay :exec
INSERT INTO payments_gate_pays (
    user_id,
    transaction_id,
    reference,
    requested_amount,
    amount,
    payment_gate_fee,
    currency,
    authorization_code,
    payment_gate_paid_at,
    channel,
    payment_gate_created_at
    )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
    )
`

type CreatePaymentGatePayParams struct {
	UserID               uuid.UUID `json:"user_id"`
	TransactionID        int64     `json:"transaction_id"`
	Reference            string    `json:"reference"`
	RequestedAmount      int64     `json:"requested_amount"`
	Amount               int64     `json:"amount"`
	PaymentGateFee       int64     `json:"payment_gate_fee"`
	Currency             string    `json:"currency"`
	AuthorizationCode    string    `json:"authorization_code"`
	PaymentGatePaidAt    time.Time `json:"payment_gate_paid_at"`
	Channel              string    `json:"channel"`
	PaymentGateCreatedAt time.Time `json:"payment_gate_created_at"`
}

func (q *Queries) CreatePaymentGatePay(ctx context.Context, arg CreatePaymentGatePayParams) error {
	_, err := q.db.Exec(ctx, createPaymentGatePay,
		arg.UserID,
		arg.TransactionID,
		arg.Reference,
		arg.RequestedAmount,
		arg.Amount,
		arg.PaymentGateFee,
		arg.Currency,
		arg.AuthorizationCode,
		arg.PaymentGatePaidAt,
		arg.Channel,
		arg.PaymentGateCreatedAt,
	)
	return err
}

const getPaymentGatePay = `-- name: GetPaymentGatePay :one
SELECT id, user_id, transaction_id, reference, requested_amount, amount, currency, payment_gate_fee, was_refunded, authorization_code, payment_gate_paid_at, channel, payment_gate_created_at, created_at
FROM payments_gate_pays
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPaymentGatePay(ctx context.Context, id uuid.UUID) (PaymentsGatePay, error) {
	row := q.db.QueryRow(ctx, getPaymentGatePay, id)
	var i PaymentsGatePay
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TransactionID,
		&i.Reference,
		&i.RequestedAmount,
		&i.Amount,
		&i.Currency,
		&i.PaymentGateFee,
		&i.WasRefunded,
		&i.AuthorizationCode,
		&i.PaymentGatePaidAt,
		&i.Channel,
		&i.PaymentGateCreatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listPaymentGatePayUser = `-- name: ListPaymentGatePayUser :many
SELECT id, user_id, transaction_id, reference, requested_amount, amount, currency, payment_gate_fee, was_refunded, authorization_code, payment_gate_paid_at, channel, payment_gate_created_at, created_at
FROM payments_gate_pays
WHERE user_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListPaymentGatePayUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListPaymentGatePayUser(ctx context.Context, arg ListPaymentGatePayUserParams) ([]PaymentsGatePay, error) {
	rows, err := q.db.Query(ctx, listPaymentGatePayUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentsGatePay{}
	for rows.Next() {
		var i PaymentsGatePay
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TransactionID,
			&i.Reference,
			&i.RequestedAmount,
			&i.Amount,
			&i.Currency,
			&i.PaymentGateFee,
			&i.WasRefunded,
			&i.AuthorizationCode,
			&i.PaymentGatePaidAt,
			&i.Channel,
			&i.PaymentGateCreatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

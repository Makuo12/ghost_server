// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: helps.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createHelp = `-- name: CreateHelp :exec
INSERT INTO helps (
    email,
    subject,
    sub_subject,
    detail
) VALUES ($1, $2, $3, $4)
`

type CreateHelpParams struct {
	Email      string `json:"email"`
	Subject    string `json:"subject"`
	SubSubject string `json:"sub_subject"`
	Detail     string `json:"detail"`
}

func (q *Queries) CreateHelp(ctx context.Context, arg CreateHelpParams) error {
	_, err := q.db.Exec(ctx, createHelp,
		arg.Email,
		arg.Subject,
		arg.SubSubject,
		arg.Detail,
	)
	return err
}

const getHelp = `-- name: GetHelp :many
SELECT id, email, subject, sub_subject, detail, created_at, updated_at 
FROM helps
WHERE email = $1
`

func (q *Queries) GetHelp(ctx context.Context, email string) ([]Help, error) {
	rows, err := q.db.Query(ctx, getHelp, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Help{}
	for rows.Next() {
		var i Help
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Subject,
			&i.SubSubject,
			&i.Detail,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeHelp = `-- name: RemoveHelp :exec
DELETE 
FROM helps
WHERE id = $1
`

func (q *Queries) RemoveHelp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeHelp, id)
	return err
}

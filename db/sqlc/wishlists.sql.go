// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: wishlists.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createWishlist = `-- name: CreateWishlist :one
INSERT INTO wishlists (
    user_id,
    name
    )
VALUES (
    $1,
    $2
    )
RETURNING id, user_id, name, created_at, updated_at
`

type CreateWishlistParams struct {
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
}

func (q *Queries) CreateWishlist(ctx context.Context, arg CreateWishlistParams) (Wishlist, error) {
	row := q.db.QueryRow(ctx, createWishlist, arg.UserID, arg.Name)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWishlist = `-- name: GetWishlist :one
SELECT id, user_id, name, created_at, updated_at
FROM wishlists
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetWishlistParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetWishlist(ctx context.Context, arg GetWishlistParams) (Wishlist, error) {
	row := q.db.QueryRow(ctx, getWishlist, arg.ID, arg.UserID)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWishlistByName = `-- name: GetWishlistByName :one
SELECT id, user_id, name, created_at, updated_at
FROM wishlists
WHERE LOWER(name) = $1 AND user_id = $2
LIMIT 1
`

type GetWishlistByNameParams struct {
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetWishlistByName(ctx context.Context, arg GetWishlistByNameParams) (Wishlist, error) {
	row := q.db.QueryRow(ctx, getWishlistByName, arg.Name, arg.UserID)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeWishlist = `-- name: RemoveWishlist :exec
DELETE FROM wishlists
WHERE user_id = $1 AND id = $2
`

type RemoveWishlistParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) RemoveWishlist(ctx context.Context, arg RemoveWishlistParams) error {
	_, err := q.db.Exec(ctx, removeWishlist, arg.UserID, arg.ID)
	return err
}

const updateWishlist = `-- name: UpdateWishlist :one
UPDATE wishlists
SET
    name = $1,
    updated_at = NOW()
WHERE user_id = $1 AND id = $2
RETURNING id, user_id, name, created_at, updated_at
`

type UpdateWishlistParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateWishlist(ctx context.Context, arg UpdateWishlistParams) (Wishlist, error) {
	row := q.db.QueryRow(ctx, updateWishlist, arg.Name, arg.ID)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

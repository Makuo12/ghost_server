// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: event_date_private_audiences.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEventDatePrivateAudience = `-- name: CreateEventDatePrivateAudience :one
INSERT INTO event_date_private_audiences (
        event_date_time_id,
        name,
        type,
        email,
        number
    )
VALUES (
        $1, $2, $3, $4, $5
    )
RETURNING id, event_date_time_id, name, type, email, number, sent, created_at, updated_at
`

type CreateEventDatePrivateAudienceParams struct {
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	Name            string    `json:"name"`
	Type            string    `json:"type"`
	Email           string    `json:"email"`
	Number          string    `json:"number"`
}

func (q *Queries) CreateEventDatePrivateAudience(ctx context.Context, arg CreateEventDatePrivateAudienceParams) (EventDatePrivateAudience, error) {
	row := q.db.QueryRow(ctx, createEventDatePrivateAudience,
		arg.EventDateTimeID,
		arg.Name,
		arg.Type,
		arg.Email,
		arg.Number,
	)
	var i EventDatePrivateAudience
	err := row.Scan(
		&i.ID,
		&i.EventDateTimeID,
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Number,
		&i.Sent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventDatePrivateAudience = `-- name: GetEventDatePrivateAudience :one
SELECT id, event_date_time_id, name, type, email, number, sent, created_at, updated_at
FROM event_date_private_audiences
WHERE event_date_time_id = $1 AND id=$2
`

type GetEventDatePrivateAudienceParams struct {
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	ID              uuid.UUID `json:"id"`
}

func (q *Queries) GetEventDatePrivateAudience(ctx context.Context, arg GetEventDatePrivateAudienceParams) (EventDatePrivateAudience, error) {
	row := q.db.QueryRow(ctx, getEventDatePrivateAudience, arg.EventDateTimeID, arg.ID)
	var i EventDatePrivateAudience
	err := row.Scan(
		&i.ID,
		&i.EventDateTimeID,
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Number,
		&i.Sent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEventDatePrivateAudience = `-- name: ListEventDatePrivateAudience :many
SELECT  name, type, email, number, id, event_date_time_id, sent
FROM event_date_private_audiences
WHERE event_date_time_id = $1
`

type ListEventDatePrivateAudienceRow struct {
	Name            string    `json:"name"`
	Type            string    `json:"type"`
	Email           string    `json:"email"`
	Number          string    `json:"number"`
	ID              uuid.UUID `json:"id"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	Sent            bool      `json:"sent"`
}

func (q *Queries) ListEventDatePrivateAudience(ctx context.Context, eventDateTimeID uuid.UUID) ([]ListEventDatePrivateAudienceRow, error) {
	rows, err := q.db.Query(ctx, listEventDatePrivateAudience, eventDateTimeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventDatePrivateAudienceRow{}
	for rows.Next() {
		var i ListEventDatePrivateAudienceRow
		if err := rows.Scan(
			&i.Name,
			&i.Type,
			&i.Email,
			&i.Number,
			&i.ID,
			&i.EventDateTimeID,
			&i.Sent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllEventDatePrivateAudience = `-- name: RemoveAllEventDatePrivateAudience :exec
DELETE FROM event_date_private_audiences
WHERE event_date_time_id=$1
`

func (q *Queries) RemoveAllEventDatePrivateAudience(ctx context.Context, eventDateTimeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllEventDatePrivateAudience, eventDateTimeID)
	return err
}

const removeEventDatePrivateAudience = `-- name: RemoveEventDatePrivateAudience :exec
DELETE FROM event_date_private_audiences
WHERE event_date_time_id=$1 AND id=$2
`

type RemoveEventDatePrivateAudienceParams struct {
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	ID              uuid.UUID `json:"id"`
}

func (q *Queries) RemoveEventDatePrivateAudience(ctx context.Context, arg RemoveEventDatePrivateAudienceParams) error {
	_, err := q.db.Exec(ctx, removeEventDatePrivateAudience, arg.EventDateTimeID, arg.ID)
	return err
}

const removeEventDatePrivateAudienceBySent = `-- name: RemoveEventDatePrivateAudienceBySent :exec
DELETE FROM event_date_private_audiences
WHERE event_date_time_id=$1 AND id=$2 AND sent=$3
`

type RemoveEventDatePrivateAudienceBySentParams struct {
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	ID              uuid.UUID `json:"id"`
	Sent            bool      `json:"sent"`
}

func (q *Queries) RemoveEventDatePrivateAudienceBySent(ctx context.Context, arg RemoveEventDatePrivateAudienceBySentParams) error {
	_, err := q.db.Exec(ctx, removeEventDatePrivateAudienceBySent, arg.EventDateTimeID, arg.ID, arg.Sent)
	return err
}

const updateEventDatePrivateAudience = `-- name: UpdateEventDatePrivateAudience :one
UPDATE event_date_private_audiences
SET 
    name = $1,
    type = $2,
    email = $3,
    number = $4,
    updated_at = NOW()
WHERE event_date_time_id = $5 AND id = $6 AND sent = $7
RETURNING name, type, email, number, id, event_date_time_id, sent
`

type UpdateEventDatePrivateAudienceParams struct {
	Name            string    `json:"name"`
	Type            string    `json:"type"`
	Email           string    `json:"email"`
	Number          string    `json:"number"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	ID              uuid.UUID `json:"id"`
	Sent            bool      `json:"sent"`
}

type UpdateEventDatePrivateAudienceRow struct {
	Name            string    `json:"name"`
	Type            string    `json:"type"`
	Email           string    `json:"email"`
	Number          string    `json:"number"`
	ID              uuid.UUID `json:"id"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	Sent            bool      `json:"sent"`
}

func (q *Queries) UpdateEventDatePrivateAudience(ctx context.Context, arg UpdateEventDatePrivateAudienceParams) (UpdateEventDatePrivateAudienceRow, error) {
	row := q.db.QueryRow(ctx, updateEventDatePrivateAudience,
		arg.Name,
		arg.Type,
		arg.Email,
		arg.Number,
		arg.EventDateTimeID,
		arg.ID,
		arg.Sent,
	)
	var i UpdateEventDatePrivateAudienceRow
	err := row.Scan(
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Number,
		&i.ID,
		&i.EventDateTimeID,
		&i.Sent,
	)
	return i, err
}

const updateEventDatePrivateAudienceSent = `-- name: UpdateEventDatePrivateAudienceSent :one
UPDATE event_date_private_audiences
SET 
    sent = $1,
    updated_at = NOW()
WHERE event_date_time_id = $2 AND id = $3
RETURNING  name, type, email, number, id, event_date_time_id, sent
`

type UpdateEventDatePrivateAudienceSentParams struct {
	Sent            bool      `json:"sent"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	ID              uuid.UUID `json:"id"`
}

type UpdateEventDatePrivateAudienceSentRow struct {
	Name            string    `json:"name"`
	Type            string    `json:"type"`
	Email           string    `json:"email"`
	Number          string    `json:"number"`
	ID              uuid.UUID `json:"id"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	Sent            bool      `json:"sent"`
}

func (q *Queries) UpdateEventDatePrivateAudienceSent(ctx context.Context, arg UpdateEventDatePrivateAudienceSentParams) (UpdateEventDatePrivateAudienceSentRow, error) {
	row := q.db.QueryRow(ctx, updateEventDatePrivateAudienceSent, arg.Sent, arg.EventDateTimeID, arg.ID)
	var i UpdateEventDatePrivateAudienceSentRow
	err := row.Scan(
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Number,
		&i.ID,
		&i.EventDateTimeID,
		&i.Sent,
	)
	return i, err
}

const updateEventDatePrivateAudienceTwo = `-- name: UpdateEventDatePrivateAudienceTwo :one
UPDATE event_date_private_audiences
SET 
    name = COALESCE($1, name),
    type = COALESCE($2, type),
    email = COALESCE($3, email),
    number = COALESCE($4, number),
    updated_at = NOW()
WHERE event_date_time_id = $5 AND id = $6 AND sent = $7
RETURNING id, event_date_time_id, name, type, email, number, sent, created_at, updated_at
`

type UpdateEventDatePrivateAudienceTwoParams struct {
	Name            pgtype.Text `json:"name"`
	Type            pgtype.Text `json:"type"`
	Email           pgtype.Text `json:"email"`
	Number          pgtype.Text `json:"number"`
	EventDateTimeID uuid.UUID   `json:"event_date_time_id"`
	ID              uuid.UUID   `json:"id"`
	Sent            bool        `json:"sent"`
}

func (q *Queries) UpdateEventDatePrivateAudienceTwo(ctx context.Context, arg UpdateEventDatePrivateAudienceTwoParams) (EventDatePrivateAudience, error) {
	row := q.db.QueryRow(ctx, updateEventDatePrivateAudienceTwo,
		arg.Name,
		arg.Type,
		arg.Email,
		arg.Number,
		arg.EventDateTimeID,
		arg.ID,
		arg.Sent,
	)
	var i EventDatePrivateAudience
	err := row.Scan(
		&i.ID,
		&i.EventDateTimeID,
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Number,
		&i.Sent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

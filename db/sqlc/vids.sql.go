// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: vids.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countVid = `-- name: CountVid :one
SELECT Count(*)
FROM vids
WHERE is_active = true
`

func (q *Queries) CountVid(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countVid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createVid = `-- name: CreateVid :one
INSERT INTO vids (
    path,
    filter,
    option_user_id,
    user_id,
    caption,
    from_who,
    extra_option_id,
    extra_option_id_fake,
    main_option_type,
    start_date
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, path, filter, option_user_id, user_id, main_option_type, start_date, caption, from_who, extra_option_id, extra_option_id_fake, is_active, created_at, updated_at
`

type CreateVidParams struct {
	Path              string    `json:"path"`
	Filter            string    `json:"filter"`
	OptionUserID      uuid.UUID `json:"option_user_id"`
	UserID            uuid.UUID `json:"user_id"`
	Caption           string    `json:"caption"`
	FromWho           string    `json:"from_who"`
	ExtraOptionID     uuid.UUID `json:"extra_option_id"`
	ExtraOptionIDFake bool      `json:"extra_option_id_fake"`
	MainOptionType    string    `json:"main_option_type"`
	StartDate         string    `json:"start_date"`
}

func (q *Queries) CreateVid(ctx context.Context, arg CreateVidParams) (Vid, error) {
	row := q.db.QueryRow(ctx, createVid,
		arg.Path,
		arg.Filter,
		arg.OptionUserID,
		arg.UserID,
		arg.Caption,
		arg.FromWho,
		arg.ExtraOptionID,
		arg.ExtraOptionIDFake,
		arg.MainOptionType,
		arg.StartDate,
	)
	var i Vid
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Filter,
		&i.OptionUserID,
		&i.UserID,
		&i.MainOptionType,
		&i.StartDate,
		&i.Caption,
		&i.FromWho,
		&i.ExtraOptionID,
		&i.ExtraOptionIDFake,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listVid = `-- name: ListVid :many
SELECT id, path, filter, option_user_id, user_id, main_option_type, start_date, caption, from_who, extra_option_id, extra_option_id_fake, is_active, created_at, updated_at
FROM vids
WHERE is_active = true
LIMIT $1
OFFSET $2
`

type ListVidParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVid(ctx context.Context, arg ListVidParams) ([]Vid, error) {
	rows, err := q.db.Query(ctx, listVid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vid{}
	for rows.Next() {
		var i Vid
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Filter,
			&i.OptionUserID,
			&i.UserID,
			&i.MainOptionType,
			&i.StartDate,
			&i.Caption,
			&i.FromWho,
			&i.ExtraOptionID,
			&i.ExtraOptionIDFake,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeVid = `-- name: RemoveVid :exec
DELETE FROM vids
WHERE option_user_id = $1
`

func (q *Queries) RemoveVid(ctx context.Context, optionUserID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeVid, optionUserID)
	return err
}

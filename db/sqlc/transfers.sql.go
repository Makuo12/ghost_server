// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transfers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    from_account_id,
    to_account_id,
    amount,
    from_account_id_int,
    to_account_id_int
    )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
    )
RETURNING id, from_account_id, to_account_id, from_account_id_int, to_account_id_int, amount, created_at, updated_at
`

type CreateTransferParams struct {
	FromAccountID    uuid.UUID `json:"from_account_id"`
	ToAccountID      uuid.UUID `json:"to_account_id"`
	Amount           int64     `json:"amount"`
	FromAccountIDInt int64     `json:"from_account_id_int"`
	ToAccountIDInt   int64     `json:"to_account_id_int"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.FromAccountIDInt,
		arg.ToAccountIDInt,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.FromAccountIDInt,
		&i.ToAccountIDInt,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, from_account_id_int, to_account_id_int, amount, created_at, updated_at
FROM transfers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id uuid.UUID) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.FromAccountIDInt,
		&i.ToAccountIDInt,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

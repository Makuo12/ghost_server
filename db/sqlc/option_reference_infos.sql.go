// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: option_reference_infos.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOptionReferenceInfo = `-- name: CreateOptionReferenceInfo :exec
INSERT INTO option_reference_infos (
    option_charge_id,
    amenities,
    space_area,
    time_zone,
    arrive_before,  
    arrive_after, 
    leave_before,    
    cancel_policy_one,  
    cancel_policy_two,
    pets_allowed,
    rules_checked,
    rules_unchecked,
    shortlet,
    location,
    host_as_individual,
    organization_name
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
`

type CreateOptionReferenceInfoParams struct {
	OptionChargeID   uuid.UUID `json:"option_charge_id"`
	Amenities        []string  `json:"amenities"`
	SpaceArea        string    `json:"space_area"`
	TimeZone         string    `json:"time_zone"`
	ArriveBefore     string    `json:"arrive_before"`
	ArriveAfter      string    `json:"arrive_after"`
	LeaveBefore      string    `json:"leave_before"`
	CancelPolicyOne  string    `json:"cancel_policy_one"`
	CancelPolicyTwo  string    `json:"cancel_policy_two"`
	PetsAllowed      bool      `json:"pets_allowed"`
	RulesChecked     []string  `json:"rules_checked"`
	RulesUnchecked   []string  `json:"rules_unchecked"`
	Shortlet         string    `json:"shortlet"`
	Location         string    `json:"location"`
	HostAsIndividual bool      `json:"host_as_individual"`
	OrganizationName string    `json:"organization_name"`
}

func (q *Queries) CreateOptionReferenceInfo(ctx context.Context, arg CreateOptionReferenceInfoParams) error {
	_, err := q.db.Exec(ctx, createOptionReferenceInfo,
		arg.OptionChargeID,
		arg.Amenities,
		arg.SpaceArea,
		arg.TimeZone,
		arg.ArriveBefore,
		arg.ArriveAfter,
		arg.LeaveBefore,
		arg.CancelPolicyOne,
		arg.CancelPolicyTwo,
		arg.PetsAllowed,
		arg.RulesChecked,
		arg.RulesUnchecked,
		arg.Shortlet,
		arg.Location,
		arg.HostAsIndividual,
		arg.OrganizationName,
	)
	return err
}

const getOptionReferenceInfoAmenities = `-- name: GetOptionReferenceInfoAmenities :one
SELECT amenities
FROM option_reference_infos
WHERE option_charge_id = $1
`

func (q *Queries) GetOptionReferenceInfoAmenities(ctx context.Context, optionChargeID uuid.UUID) ([]string, error) {
	row := q.db.QueryRow(ctx, getOptionReferenceInfoAmenities, optionChargeID)
	var amenities []string
	err := row.Scan(&amenities)
	return amenities, err
}

const removeOptionReferenceInfo = `-- name: RemoveOptionReferenceInfo :exec
DELETE FROM option_reference_infos
WHERE option_charge_id = $1
`

func (q *Queries) RemoveOptionReferenceInfo(ctx context.Context, optionChargeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionReferenceInfo, optionChargeID)
	return err
}

const updateOptionReferenceInfoComplete = `-- name: UpdateOptionReferenceInfoComplete :one
UPDATE option_reference_infos
SET 
    amenities = COALESCE($1, amenities),
    space_area = COALESCE($2, space_area),
    pets_allowed = COALESCE($3, pets_allowed),
    rules_checked = COALESCE($4, rules_checked),
    rules_unchecked = COALESCE($5, arrive_after),
    shortlet = COALESCE($6, shortlet),
    location = COALESCE($7, location),
    host_as_individual = COALESCE($8, host_as_individual),
    organization_name = COALESCE($9, organization_name),
    updated_at = NOW()
WHERE option_charge_id = $10
RETURNING option_charge_id, amenities, space_area, time_zone, arrive_before, arrive_after, leave_before, cancel_policy_one, cancel_policy_two, pets_allowed, rules_checked, rules_unchecked, shortlet, location, host_as_individual, organization_name, created_at, updated_at
`

type UpdateOptionReferenceInfoCompleteParams struct {
	Amenities        []string    `json:"amenities"`
	SpaceArea        pgtype.Text `json:"space_area"`
	PetsAllowed      pgtype.Bool `json:"pets_allowed"`
	RulesChecked     []string    `json:"rules_checked"`
	ArriveAfter      []string    `json:"arrive_after"`
	Shortlet         pgtype.Text `json:"shortlet"`
	Location         pgtype.Text `json:"location"`
	HostAsIndividual pgtype.Bool `json:"host_as_individual"`
	OrganizationName pgtype.Text `json:"organization_name"`
	OptionChargeID   uuid.UUID   `json:"option_charge_id"`
}

func (q *Queries) UpdateOptionReferenceInfoComplete(ctx context.Context, arg UpdateOptionReferenceInfoCompleteParams) (OptionReferenceInfo, error) {
	row := q.db.QueryRow(ctx, updateOptionReferenceInfoComplete,
		arg.Amenities,
		arg.SpaceArea,
		arg.PetsAllowed,
		arg.RulesChecked,
		arg.ArriveAfter,
		arg.Shortlet,
		arg.Location,
		arg.HostAsIndividual,
		arg.OrganizationName,
		arg.OptionChargeID,
	)
	var i OptionReferenceInfo
	err := row.Scan(
		&i.OptionChargeID,
		&i.Amenities,
		&i.SpaceArea,
		&i.TimeZone,
		&i.ArriveBefore,
		&i.ArriveAfter,
		&i.LeaveBefore,
		&i.CancelPolicyOne,
		&i.CancelPolicyTwo,
		&i.PetsAllowed,
		&i.RulesChecked,
		&i.RulesUnchecked,
		&i.Shortlet,
		&i.Location,
		&i.HostAsIndividual,
		&i.OrganizationName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

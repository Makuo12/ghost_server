// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: options_infos_category.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOptionInfoCategory = `-- name: CreateOptionInfoCategory :one
INSERT INTO options_infos_category (
    option_id,
    type_of_shortlet,
    amenities,
    highlight,
    space_area,
    space_type,
    des,
    name
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING option_id, type_of_shortlet, amenities, highlight, space_area, space_type, des, name, created_at, updated_at
`

type CreateOptionInfoCategoryParams struct {
	OptionID       uuid.UUID `json:"option_id"`
	TypeOfShortlet []string  `json:"type_of_shortlet"`
	Amenities      []string  `json:"amenities"`
	Highlight      []string  `json:"highlight"`
	SpaceArea      []string  `json:"space_area"`
	SpaceType      []string  `json:"space_type"`
	Des            []string  `json:"des"`
	Name           []string  `json:"name"`
}

func (q *Queries) CreateOptionInfoCategory(ctx context.Context, arg CreateOptionInfoCategoryParams) (OptionsInfosCategory, error) {
	row := q.db.QueryRow(ctx, createOptionInfoCategory,
		arg.OptionID,
		arg.TypeOfShortlet,
		arg.Amenities,
		arg.Highlight,
		arg.SpaceArea,
		arg.SpaceType,
		arg.Des,
		arg.Name,
	)
	var i OptionsInfosCategory
	err := row.Scan(
		&i.OptionID,
		&i.TypeOfShortlet,
		&i.Amenities,
		&i.Highlight,
		&i.SpaceArea,
		&i.SpaceType,
		&i.Des,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionInfoCategory = `-- name: GetOptionInfoCategory :one
SELECT option_id, type_of_shortlet, amenities, highlight, space_area, space_type, des, name, created_at, updated_at 
FROM options_infos_category
WHERE option_id = $1
`

func (q *Queries) GetOptionInfoCategory(ctx context.Context, optionID uuid.UUID) (OptionsInfosCategory, error) {
	row := q.db.QueryRow(ctx, getOptionInfoCategory, optionID)
	var i OptionsInfosCategory
	err := row.Scan(
		&i.OptionID,
		&i.TypeOfShortlet,
		&i.Amenities,
		&i.Highlight,
		&i.SpaceArea,
		&i.SpaceType,
		&i.Des,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeOptionInfoCategory = `-- name: RemoveOptionInfoCategory :exec
DELETE FROM options_infos_category 
WHERE option_id = $1
`

func (q *Queries) RemoveOptionInfoCategory(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionInfoCategory, optionID)
	return err
}

const updateOptionInfoCategory = `-- name: UpdateOptionInfoCategory :one
UPDATE options_infos_category
SET 
    type_of_shortlet = $1,
    amenities = $2,
    highlight = $3,
    space_area = $4,
    des = $5,
    name = $6,
    space_type = $7,
    updated_at = NOW()
WHERE option_id = $8
RETURNING option_id, type_of_shortlet, amenities, highlight, space_area, space_type, des, name, created_at, updated_at
`

type UpdateOptionInfoCategoryParams struct {
	TypeOfShortlet []string  `json:"type_of_shortlet"`
	Amenities      []string  `json:"amenities"`
	Highlight      []string  `json:"highlight"`
	SpaceArea      []string  `json:"space_area"`
	Des            []string  `json:"des"`
	Name           []string  `json:"name"`
	SpaceType      []string  `json:"space_type"`
	OptionID       uuid.UUID `json:"option_id"`
}

func (q *Queries) UpdateOptionInfoCategory(ctx context.Context, arg UpdateOptionInfoCategoryParams) (OptionsInfosCategory, error) {
	row := q.db.QueryRow(ctx, updateOptionInfoCategory,
		arg.TypeOfShortlet,
		arg.Amenities,
		arg.Highlight,
		arg.SpaceArea,
		arg.Des,
		arg.Name,
		arg.SpaceType,
		arg.OptionID,
	)
	var i OptionsInfosCategory
	err := row.Scan(
		&i.OptionID,
		&i.TypeOfShortlet,
		&i.Amenities,
		&i.Highlight,
		&i.SpaceArea,
		&i.SpaceType,
		&i.Des,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

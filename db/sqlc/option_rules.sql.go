// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: option_rules.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOptionRule = `-- name: CreateOptionRule :one
INSERT INTO option_rules (
        option_id,
        tag,
        type,
        checked,
        start_time,
        end_time
    )
VALUES (
        $1, $2, $3, $4, $5, $6
    )
RETURNING id, option_id, checked, tag, type, des, start_time, end_time, created_at, updated_at
`

type CreateOptionRuleParams struct {
	OptionID  uuid.UUID `json:"option_id"`
	Tag       string    `json:"tag"`
	Type      string    `json:"type"`
	Checked   bool      `json:"checked"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) CreateOptionRule(ctx context.Context, arg CreateOptionRuleParams) (OptionRule, error) {
	row := q.db.QueryRow(ctx, createOptionRule,
		arg.OptionID,
		arg.Tag,
		arg.Type,
		arg.Checked,
		arg.StartTime,
		arg.EndTime,
	)
	var i OptionRule
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Checked,
		&i.Tag,
		&i.Type,
		&i.Des,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionRule = `-- name: GetOptionRule :one
SELECT id, option_id, checked, tag, type, des, start_time, end_time, created_at, updated_at
FROM option_rules
WHERE id = $1 AND option_id = $2
`

type GetOptionRuleParams struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

func (q *Queries) GetOptionRule(ctx context.Context, arg GetOptionRuleParams) (OptionRule, error) {
	row := q.db.QueryRow(ctx, getOptionRule, arg.ID, arg.OptionID)
	var i OptionRule
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Checked,
		&i.Tag,
		&i.Type,
		&i.Des,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionRuleByType = `-- name: GetOptionRuleByType :one
SELECT id, option_id, checked, tag, type, des, start_time, end_time, created_at, updated_at
FROM option_rules
WHERE option_id = $1 AND type = $2 AND tag = $3
`

type GetOptionRuleByTypeParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
	Tag      string    `json:"tag"`
}

func (q *Queries) GetOptionRuleByType(ctx context.Context, arg GetOptionRuleByTypeParams) (OptionRule, error) {
	row := q.db.QueryRow(ctx, getOptionRuleByType, arg.OptionID, arg.Type, arg.Tag)
	var i OptionRule
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Checked,
		&i.Tag,
		&i.Type,
		&i.Des,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionRuleDetail = `-- name: GetOptionRuleDetail :one
SELECT id, tag, type, checked, des
FROM option_rules
WHERE option_id = $1 AND type = $2 AND tag = $3
`

type GetOptionRuleDetailParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
	Tag      string    `json:"tag"`
}

type GetOptionRuleDetailRow struct {
	ID      uuid.UUID `json:"id"`
	Tag     string    `json:"tag"`
	Type    string    `json:"type"`
	Checked bool      `json:"checked"`
	Des     string    `json:"des"`
}

func (q *Queries) GetOptionRuleDetail(ctx context.Context, arg GetOptionRuleDetailParams) (GetOptionRuleDetailRow, error) {
	row := q.db.QueryRow(ctx, getOptionRuleDetail, arg.OptionID, arg.Type, arg.Tag)
	var i GetOptionRuleDetailRow
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Type,
		&i.Checked,
		&i.Des,
	)
	return i, err
}

const listAllOptionRule = `-- name: ListAllOptionRule :many
SELECT id, option_id, checked, tag, type, des, start_time, end_time, created_at, updated_at
FROM option_rules
WHERE option_id = $1
`

func (q *Queries) ListAllOptionRule(ctx context.Context, optionID uuid.UUID) ([]OptionRule, error) {
	rows, err := q.db.Query(ctx, listAllOptionRule, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OptionRule{}
	for rows.Next() {
		var i OptionRule
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.Checked,
			&i.Tag,
			&i.Type,
			&i.Des,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOptionRule = `-- name: ListOptionRule :many
SELECT id, option_id, checked, tag, type, des, start_time, end_time, created_at, updated_at
FROM option_rules
WHERE option_id = $1 AND checked = $2
`

type ListOptionRuleParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Checked  bool      `json:"checked"`
}

func (q *Queries) ListOptionRule(ctx context.Context, arg ListOptionRuleParams) ([]OptionRule, error) {
	rows, err := q.db.Query(ctx, listOptionRule, arg.OptionID, arg.Checked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OptionRule{}
	for rows.Next() {
		var i OptionRule
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.Checked,
			&i.Tag,
			&i.Type,
			&i.Des,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOptionRuleOne = `-- name: ListOptionRuleOne :many
SELECT tag, type, checked, id, des
FROM option_rules
WHERE option_id = $1
`

type ListOptionRuleOneRow struct {
	Tag     string    `json:"tag"`
	Type    string    `json:"type"`
	Checked bool      `json:"checked"`
	ID      uuid.UUID `json:"id"`
	Des     string    `json:"des"`
}

func (q *Queries) ListOptionRuleOne(ctx context.Context, optionID uuid.UUID) ([]ListOptionRuleOneRow, error) {
	rows, err := q.db.Query(ctx, listOptionRuleOne, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOptionRuleOneRow{}
	for rows.Next() {
		var i ListOptionRuleOneRow
		if err := rows.Scan(
			&i.Tag,
			&i.Type,
			&i.Checked,
			&i.ID,
			&i.Des,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOptionRuleTag = `-- name: ListOptionRuleTag :many
SELECT tag
FROM option_rules
WHERE option_id = $1 AND checked = $2
`

type ListOptionRuleTagParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Checked  bool      `json:"checked"`
}

func (q *Queries) ListOptionRuleTag(ctx context.Context, arg ListOptionRuleTagParams) ([]string, error) {
	rows, err := q.db.Query(ctx, listOptionRuleTag, arg.OptionID, arg.Checked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllOptionRule = `-- name: RemoveAllOptionRule :exec
DELETE FROM option_rules
WHERE option_id = $1
`

func (q *Queries) RemoveAllOptionRule(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllOptionRule, optionID)
	return err
}

const removeOptionRule = `-- name: RemoveOptionRule :exec
DELETE FROM option_rules
WHERE id = $1
`

func (q *Queries) RemoveOptionRule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionRule, id)
	return err
}

const updateOptionRule = `-- name: UpdateOptionRule :one
UPDATE option_rules
    SET checked = $1, 
    updated_at = NOW()
WHERE id = $2
RETURNING tag, type, checked, id, des
`

type UpdateOptionRuleParams struct {
	Checked bool      `json:"checked"`
	ID      uuid.UUID `json:"id"`
}

type UpdateOptionRuleRow struct {
	Tag     string    `json:"tag"`
	Type    string    `json:"type"`
	Checked bool      `json:"checked"`
	ID      uuid.UUID `json:"id"`
	Des     string    `json:"des"`
}

func (q *Queries) UpdateOptionRule(ctx context.Context, arg UpdateOptionRuleParams) (UpdateOptionRuleRow, error) {
	row := q.db.QueryRow(ctx, updateOptionRule, arg.Checked, arg.ID)
	var i UpdateOptionRuleRow
	err := row.Scan(
		&i.Tag,
		&i.Type,
		&i.Checked,
		&i.ID,
		&i.Des,
	)
	return i, err
}

const updateOptionRuleDetail = `-- name: UpdateOptionRuleDetail :one
UPDATE option_rules
SET
    des = COALESCE($1, des),
    start_time = COALESCE($2, start_time),
    end_time = COALESCE($3, end_time),
    updated_at = NOW()
WHERE id = $4  AND option_id = $5 
RETURNING id, tag, type, checked, des, start_time, end_time
`

type UpdateOptionRuleDetailParams struct {
	Des       pgtype.Text `json:"des"`
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
	ID        uuid.UUID   `json:"id"`
	OptionID  uuid.UUID   `json:"option_id"`
}

type UpdateOptionRuleDetailRow struct {
	ID        uuid.UUID `json:"id"`
	Tag       string    `json:"tag"`
	Type      string    `json:"type"`
	Checked   bool      `json:"checked"`
	Des       string    `json:"des"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) UpdateOptionRuleDetail(ctx context.Context, arg UpdateOptionRuleDetailParams) (UpdateOptionRuleDetailRow, error) {
	row := q.db.QueryRow(ctx, updateOptionRuleDetail,
		arg.Des,
		arg.StartTime,
		arg.EndTime,
		arg.ID,
		arg.OptionID,
	)
	var i UpdateOptionRuleDetailRow
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Type,
		&i.Checked,
		&i.Des,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

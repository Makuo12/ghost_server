// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: shortlets.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createShortlet = `-- name: CreateShortlet :one
INSERT INTO shortlets (
      option_id,
      type_of_shortlet,
      guest_welcomed,
      year_built,
      property_size,
      property_size_unit,
      shared_spaces_with
   )
VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6,
      $7
   )
RETURNING option_id, space_type, any_space_shared, guest_welcomed, publish_check_in_steps, year_built, check_in_method, check_in_method_des, property_size, shared_spaces_with, property_size_unit, type_of_shortlet, created_at, updated_at
`

type CreateShortletParams struct {
	OptionID         uuid.UUID `json:"option_id"`
	TypeOfShortlet   string    `json:"type_of_shortlet"`
	GuestWelcomed    int32     `json:"guest_welcomed"`
	YearBuilt        int32     `json:"year_built"`
	PropertySize     int32     `json:"property_size"`
	PropertySizeUnit string    `json:"property_size_unit"`
	SharedSpacesWith []string  `json:"shared_spaces_with"`
}

func (q *Queries) CreateShortlet(ctx context.Context, arg CreateShortletParams) (Shortlet, error) {
	row := q.db.QueryRow(ctx, createShortlet,
		arg.OptionID,
		arg.TypeOfShortlet,
		arg.GuestWelcomed,
		arg.YearBuilt,
		arg.PropertySize,
		arg.PropertySizeUnit,
		arg.SharedSpacesWith,
	)
	var i Shortlet
	err := row.Scan(
		&i.OptionID,
		&i.SpaceType,
		&i.AnySpaceShared,
		&i.GuestWelcomed,
		&i.PublishCheckInSteps,
		&i.YearBuilt,
		&i.CheckInMethod,
		&i.CheckInMethodDes,
		&i.PropertySize,
		&i.SharedSpacesWith,
		&i.PropertySizeUnit,
		&i.TypeOfShortlet,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShortlet = `-- name: DeleteShortlet :exec





DELETE FROM shortlets
WHERE option_id = $1
`

// -- name: ListShortletView :many
// SELECT o_i.id,
//
//	o_i.host_name_option,
//	o_i.average_rating,
//	o_i.currency,
//	o_i.created_at,
//	o_i.is_verified,
//	o_i.cover_image,
//	o_i.is_top_seller,
//	o_i.photo,
//	l.state,
//	l.city,
//	l.country,
//	s.price,
//	s.num_of_beds
//
// FROM options_infos o_i
//
//	JOIN locations l on o_i.id = l.option_id
//	JOIN shortlets s on o_i.id = s.option_id
//
// WHERE s.type_of_shortlet = $1
//
//	AND o_i.is_active = $2
//	AND o_i.option_type = $3
//
// ORDER BY o_i.id
// LIMIT $4
// OFFSET $5;
// -- name: GetShortletTypes :many
// SELECT DISTINCT type_of_shortlet
// FROM shortlets;
// -- name: GetShortletTypeCount :one
// SELECT COUNT(*)
// FROM shortlets
// WHERE type_of_shortlet = $1
// LIMIT 1;
// -- name: UpdateShortletDescription :one
// UPDATE shortlets
// SET num_of_bathrooms = $2,
//
//	num_of_beds = $3,
//	num_of_bedrooms = $4,
//	type_of_shortlet = $5,
//	updated_at = NOW()
//
// WHERE option_id = $1
// RETURNING *;
// -- name: UpdateShortletType :one
// UPDATE shortlets
// SET type_of_shortlet = $2,
//
//	updated_at = NOW()
//
// WHERE option_id = $1
// RETURNING *;
// -- name: UpdateShortletPolicy :one
// UPDATE shortlets
// SET house_service_allowed = $2,
//
//	loud_music_allowed = $3,
//	does_max_guests = $4,
//	guest_hold_events = $5,
//	max_num_guests = $6,
//	updated_at = NOW()
//
// WHERE option_id = $1
// RETURNING *;
// -- name: UpdateShortletAmenities :one
// UPDATE shortlets
// SET amenities = $2,
//
//	updated_at = NOW()
//
// WHERE option_id = $1
// RETURNING *;
// -- name: UpdateShortletPrice :one
// UPDATE shortlets
// SET price = $2,
//
//	updated_at = NOW()
//
// WHERE option_id = $1
// RETURNING *;
func (q *Queries) DeleteShortlet(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteShortlet, optionID)
	return err
}

const getGuestNumAndSpaces = `-- name: GetGuestNumAndSpaces :many
SELECT s.guest_welcomed, s_a.space_type
FROM shortlets s
   JOIN space_areas s_a on s.option_id = s_a.option_id
WHERE s.option_id = $1
`

type GetGuestNumAndSpacesRow struct {
	GuestWelcomed int32  `json:"guest_welcomed"`
	SpaceType     string `json:"space_type"`
}

func (q *Queries) GetGuestNumAndSpaces(ctx context.Context, optionID uuid.UUID) ([]GetGuestNumAndSpacesRow, error) {
	rows, err := q.db.Query(ctx, getGuestNumAndSpaces, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGuestNumAndSpacesRow{}
	for rows.Next() {
		var i GetGuestNumAndSpacesRow
		if err := rows.Scan(&i.GuestWelcomed, &i.SpaceType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShortlet = `-- name: GetShortlet :one
SELECT option_id, space_type, any_space_shared, guest_welcomed, publish_check_in_steps, year_built, check_in_method, check_in_method_des, property_size, shared_spaces_with, property_size_unit, type_of_shortlet, created_at, updated_at
FROM shortlets
WHERE option_id = $1
`

func (q *Queries) GetShortlet(ctx context.Context, optionID uuid.UUID) (Shortlet, error) {
	row := q.db.QueryRow(ctx, getShortlet, optionID)
	var i Shortlet
	err := row.Scan(
		&i.OptionID,
		&i.SpaceType,
		&i.AnySpaceShared,
		&i.GuestWelcomed,
		&i.PublishCheckInSteps,
		&i.YearBuilt,
		&i.CheckInMethod,
		&i.CheckInMethodDes,
		&i.PropertySize,
		&i.SharedSpacesWith,
		&i.PropertySizeUnit,
		&i.TypeOfShortlet,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShortletCheckInMethod = `-- name: GetShortletCheckInMethod :one
SELECT check_in_method, check_in_method_des
FROM shortlets
WHERE option_id = $1
`

type GetShortletCheckInMethodRow struct {
	CheckInMethod    string `json:"check_in_method"`
	CheckInMethodDes string `json:"check_in_method_des"`
}

func (q *Queries) GetShortletCheckInMethod(ctx context.Context, optionID uuid.UUID) (GetShortletCheckInMethodRow, error) {
	row := q.db.QueryRow(ctx, getShortletCheckInMethod, optionID)
	var i GetShortletCheckInMethodRow
	err := row.Scan(&i.CheckInMethod, &i.CheckInMethodDes)
	return i, err
}

const getShortletDateTimeByOption = `-- name: GetShortletDateTimeByOption :one
SELECT o_p.price, o_i.currency, o_p.weekend_price
FROM shortlets s
   JOIN options_infos o_i on o_i.id = s.option_id
   JOIN options_prices o_p on o_p.option_id = o_i.id
   JOIN users u on u.id = o_i.host_id
WHERE s.option_id = $1 AND u.id = $2 AND o_i.is_complete = $3
`

type GetShortletDateTimeByOptionParams struct {
	OptionID   uuid.UUID `json:"option_id"`
	ID         uuid.UUID `json:"id"`
	IsComplete bool      `json:"is_complete"`
}

type GetShortletDateTimeByOptionRow struct {
	Price        int64  `json:"price"`
	Currency     string `json:"currency"`
	WeekendPrice int64  `json:"weekend_price"`
}

func (q *Queries) GetShortletDateTimeByOption(ctx context.Context, arg GetShortletDateTimeByOptionParams) (GetShortletDateTimeByOptionRow, error) {
	row := q.db.QueryRow(ctx, getShortletDateTimeByOption, arg.OptionID, arg.ID, arg.IsComplete)
	var i GetShortletDateTimeByOptionRow
	err := row.Scan(&i.Price, &i.Currency, &i.WeekendPrice)
	return i, err
}

const getShortletGuestWelcomedAndShared = `-- name: GetShortletGuestWelcomedAndShared :one
SELECT guest_welcomed, any_space_shared
FROM shortlets
WHERE option_id = $1
`

type GetShortletGuestWelcomedAndSharedRow struct {
	GuestWelcomed  int32 `json:"guest_welcomed"`
	AnySpaceShared bool  `json:"any_space_shared"`
}

func (q *Queries) GetShortletGuestWelcomedAndShared(ctx context.Context, optionID uuid.UUID) (GetShortletGuestWelcomedAndSharedRow, error) {
	row := q.db.QueryRow(ctx, getShortletGuestWelcomedAndShared, optionID)
	var i GetShortletGuestWelcomedAndSharedRow
	err := row.Scan(&i.GuestWelcomed, &i.AnySpaceShared)
	return i, err
}

const getShortletView = `-- name: GetShortletView :one
SELECT o_i.id
FROM options_infos o_i
   JOIN locations l on o_i.id = l.option_id
   JOIN shortlets s on o_i.id = s.option_id
   JOIN options_info_details o_i_d on o_i = o_i_d.option_id
   JOIN options_info_details o_i_d on o_i = o_i_d.option_id
WHERE o_i.id = $1
`

func (q *Queries) GetShortletView(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getShortletView, id)
	err := row.Scan(&id)
	return id, err
}

const removeShortlet = `-- name: RemoveShortlet :exec
DELETE FROM shortlets
WHERE option_id = $1
`

func (q *Queries) RemoveShortlet(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeShortlet, optionID)
	return err
}

const updateShortletCheckInMethod = `-- name: UpdateShortletCheckInMethod :one
UPDATE shortlets
SET
   check_in_method = COALESCE($1, check_in_method),
   check_in_method_des = COALESCE($2, check_in_method_des),
   updated_at = NOW()
WHERE option_id = $3 
RETURNING check_in_method, check_in_method_des
`

type UpdateShortletCheckInMethodParams struct {
	CheckInMethod    pgtype.Text `json:"check_in_method"`
	CheckInMethodDes pgtype.Text `json:"check_in_method_des"`
	OptionID         uuid.UUID   `json:"option_id"`
}

type UpdateShortletCheckInMethodRow struct {
	CheckInMethod    string `json:"check_in_method"`
	CheckInMethodDes string `json:"check_in_method_des"`
}

func (q *Queries) UpdateShortletCheckInMethod(ctx context.Context, arg UpdateShortletCheckInMethodParams) (UpdateShortletCheckInMethodRow, error) {
	row := q.db.QueryRow(ctx, updateShortletCheckInMethod, arg.CheckInMethod, arg.CheckInMethodDes, arg.OptionID)
	var i UpdateShortletCheckInMethodRow
	err := row.Scan(&i.CheckInMethod, &i.CheckInMethodDes)
	return i, err
}

const updateShortletInfo = `-- name: UpdateShortletInfo :one
UPDATE shortlets
SET 
   space_type = COALESCE($1, space_type),
   type_of_shortlet = COALESCE($2, type_of_shortlet),
   any_space_shared = COALESCE($3, any_space_shared),
   guest_welcomed = COALESCE($4, guest_welcomed),
   year_built = COALESCE($5, year_built),
   publish_check_in_steps = COALESCE($6, publish_check_in_steps),
   property_size = COALESCE($7, property_size),
   property_size_unit = COALESCE($8, property_size_unit),
   updated_at = NOW()
WHERE option_id = $9 
RETURNING option_id, space_type, any_space_shared, guest_welcomed, publish_check_in_steps, year_built, check_in_method, check_in_method_des, property_size, shared_spaces_with, property_size_unit, type_of_shortlet, created_at, updated_at
`

type UpdateShortletInfoParams struct {
	SpaceType           pgtype.Text `json:"space_type"`
	TypeOfShortlet      pgtype.Text `json:"type_of_shortlet"`
	AnySpaceShared      pgtype.Bool `json:"any_space_shared"`
	GuestWelcomed       pgtype.Int4 `json:"guest_welcomed"`
	YearBuilt           pgtype.Int4 `json:"year_built"`
	PublishCheckInSteps pgtype.Bool `json:"publish_check_in_steps"`
	PropertySize        pgtype.Int4 `json:"property_size"`
	PropertySizeUnit    pgtype.Text `json:"property_size_unit"`
	OptionID            uuid.UUID   `json:"option_id"`
}

func (q *Queries) UpdateShortletInfo(ctx context.Context, arg UpdateShortletInfoParams) (Shortlet, error) {
	row := q.db.QueryRow(ctx, updateShortletInfo,
		arg.SpaceType,
		arg.TypeOfShortlet,
		arg.AnySpaceShared,
		arg.GuestWelcomed,
		arg.YearBuilt,
		arg.PublishCheckInSteps,
		arg.PropertySize,
		arg.PropertySizeUnit,
		arg.OptionID,
	)
	var i Shortlet
	err := row.Scan(
		&i.OptionID,
		&i.SpaceType,
		&i.AnySpaceShared,
		&i.GuestWelcomed,
		&i.PublishCheckInSteps,
		&i.YearBuilt,
		&i.CheckInMethod,
		&i.CheckInMethodDes,
		&i.PropertySize,
		&i.SharedSpacesWith,
		&i.PropertySizeUnit,
		&i.TypeOfShortlet,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateShortletInfoSharedWith = `-- name: UpdateShortletInfoSharedWith :one
UPDATE shortlets
SET
   shared_spaces_with = $1,
   updated_at = NOW()
WHERE option_id = $2
RETURNING option_id, space_type, any_space_shared, guest_welcomed, publish_check_in_steps, year_built, check_in_method, check_in_method_des, property_size, shared_spaces_with, property_size_unit, type_of_shortlet, created_at, updated_at
`

type UpdateShortletInfoSharedWithParams struct {
	SharedSpacesWith []string  `json:"shared_spaces_with"`
	OptionID         uuid.UUID `json:"option_id"`
}

func (q *Queries) UpdateShortletInfoSharedWith(ctx context.Context, arg UpdateShortletInfoSharedWithParams) (Shortlet, error) {
	row := q.db.QueryRow(ctx, updateShortletInfoSharedWith, arg.SharedSpacesWith, arg.OptionID)
	var i Shortlet
	err := row.Scan(
		&i.OptionID,
		&i.SpaceType,
		&i.AnySpaceShared,
		&i.GuestWelcomed,
		&i.PublishCheckInSteps,
		&i.YearBuilt,
		&i.CheckInMethod,
		&i.CheckInMethodDes,
		&i.PropertySize,
		&i.SharedSpacesWith,
		&i.PropertySizeUnit,
		&i.TypeOfShortlet,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateShortletPublishCheckInStep = `-- name: UpdateShortletPublishCheckInStep :one
UPDATE shortlets
SET 
   publish_check_in_steps = CASE WHEN publish_check_in_steps = false THEN true ELSE false END,
   updated_at = NOW()
WHERE option_id = $1 
RETURNING publish_check_in_steps
`

func (q *Queries) UpdateShortletPublishCheckInStep(ctx context.Context, optionID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, updateShortletPublishCheckInStep, optionID)
	var publish_check_in_steps bool
	err := row.Scan(&publish_check_in_steps)
	return publish_check_in_steps, err
}

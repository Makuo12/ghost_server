// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: options_prices.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOptionPrice = `-- name: CreateOptionPrice :one
INSERT INTO options_prices (
    option_id,
    price,
    weekend_price
) VALUES (
    $1, $2, $3
) RETURNING option_id, price, weekend_price, created_at, updated_at
`

type CreateOptionPriceParams struct {
	OptionID     uuid.UUID `json:"option_id"`
	Price        int64     `json:"price"`
	WeekendPrice int64     `json:"weekend_price"`
}

func (q *Queries) CreateOptionPrice(ctx context.Context, arg CreateOptionPriceParams) (OptionsPrice, error) {
	row := q.db.QueryRow(ctx, createOptionPrice, arg.OptionID, arg.Price, arg.WeekendPrice)
	var i OptionsPrice
	err := row.Scan(
		&i.OptionID,
		&i.Price,
		&i.WeekendPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionPrice = `-- name: GetOptionPrice :one
SELECT option_id, price, weekend_price, created_at, updated_at 
FROM options_prices
WHERE option_id = $1
`

func (q *Queries) GetOptionPrice(ctx context.Context, optionID uuid.UUID) (OptionsPrice, error) {
	row := q.db.QueryRow(ctx, getOptionPrice, optionID)
	var i OptionsPrice
	err := row.Scan(
		&i.OptionID,
		&i.Price,
		&i.WeekendPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeOptionPrice = `-- name: RemoveOptionPrice :exec
DELETE FROM options_prices 
WHERE option_id = $1
`

func (q *Queries) RemoveOptionPrice(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionPrice, optionID)
	return err
}

const updateOptionPrice = `-- name: UpdateOptionPrice :one
UPDATE options_prices 
SET price = COALESCE($1, price),
    weekend_price = COALESCE($2, weekend_price),
    updated_at = NOW()
WHERE option_id = $3
RETURNING option_id, price, weekend_price, created_at, updated_at
`

type UpdateOptionPriceParams struct {
	Price        pgtype.Int8 `json:"price"`
	WeekendPrice pgtype.Int8 `json:"weekend_price"`
	OptionID     uuid.UUID   `json:"option_id"`
}

func (q *Queries) UpdateOptionPrice(ctx context.Context, arg UpdateOptionPriceParams) (OptionsPrice, error) {
	row := q.db.QueryRow(ctx, updateOptionPrice, arg.Price, arg.WeekendPrice, arg.OptionID)
	var i OptionsPrice
	err := row.Scan(
		&i.OptionID,
		&i.Price,
		&i.WeekendPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

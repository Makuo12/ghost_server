// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: things_to_notes.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createThingToNote = `-- name: CreateThingToNote :one
INSERT INTO things_to_notes (
        option_id,
        tag,
        type,
        checked
    )
VALUES (
        $1, $2, $3, $4
    )
RETURNING id, option_id, checked, tag, type, des, created_at, updated_at
`

type CreateThingToNoteParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Tag      string    `json:"tag"`
	Type     string    `json:"type"`
	Checked  bool      `json:"checked"`
}

func (q *Queries) CreateThingToNote(ctx context.Context, arg CreateThingToNoteParams) (ThingsToNote, error) {
	row := q.db.QueryRow(ctx, createThingToNote,
		arg.OptionID,
		arg.Tag,
		arg.Type,
		arg.Checked,
	)
	var i ThingsToNote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Checked,
		&i.Tag,
		&i.Type,
		&i.Des,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getThingToNote = `-- name: GetThingToNote :one
SELECT id, option_id, checked, tag, type, des, created_at, updated_at
FROM things_to_notes
WHERE id = $1 AND option_id = $2
`

type GetThingToNoteParams struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

func (q *Queries) GetThingToNote(ctx context.Context, arg GetThingToNoteParams) (ThingsToNote, error) {
	row := q.db.QueryRow(ctx, getThingToNote, arg.ID, arg.OptionID)
	var i ThingsToNote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Checked,
		&i.Tag,
		&i.Type,
		&i.Des,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getThingToNoteByTag = `-- name: GetThingToNoteByTag :one
SELECT id, option_id, checked, tag, type, des, created_at, updated_at
FROM things_to_notes
WHERE option_id = $1 AND tag = $2
`

type GetThingToNoteByTagParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Tag      string    `json:"tag"`
}

func (q *Queries) GetThingToNoteByTag(ctx context.Context, arg GetThingToNoteByTagParams) (ThingsToNote, error) {
	row := q.db.QueryRow(ctx, getThingToNoteByTag, arg.OptionID, arg.Tag)
	var i ThingsToNote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Checked,
		&i.Tag,
		&i.Type,
		&i.Des,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getThingToNoteByType = `-- name: GetThingToNoteByType :one
SELECT id, option_id, checked, tag, type, des, created_at, updated_at
FROM things_to_notes
WHERE option_id = $1 AND type = $2 AND tag = $3
`

type GetThingToNoteByTypeParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
	Tag      string    `json:"tag"`
}

func (q *Queries) GetThingToNoteByType(ctx context.Context, arg GetThingToNoteByTypeParams) (ThingsToNote, error) {
	row := q.db.QueryRow(ctx, getThingToNoteByType, arg.OptionID, arg.Type, arg.Tag)
	var i ThingsToNote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Checked,
		&i.Tag,
		&i.Type,
		&i.Des,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getThingToNoteDetail = `-- name: GetThingToNoteDetail :one
SELECT id, tag, type, checked, des
FROM things_to_notes
WHERE option_id = $1 AND type = $2 AND tag = $3
`

type GetThingToNoteDetailParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
	Tag      string    `json:"tag"`
}

type GetThingToNoteDetailRow struct {
	ID      uuid.UUID `json:"id"`
	Tag     string    `json:"tag"`
	Type    string    `json:"type"`
	Checked bool      `json:"checked"`
	Des     string    `json:"des"`
}

func (q *Queries) GetThingToNoteDetail(ctx context.Context, arg GetThingToNoteDetailParams) (GetThingToNoteDetailRow, error) {
	row := q.db.QueryRow(ctx, getThingToNoteDetail, arg.OptionID, arg.Type, arg.Tag)
	var i GetThingToNoteDetailRow
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Type,
		&i.Checked,
		&i.Des,
	)
	return i, err
}

const listThingToNote = `-- name: ListThingToNote :many
SELECT id, option_id, checked, tag, type, des, created_at, updated_at
FROM things_to_notes
WHERE option_id = $1 AND checked = $2
`

type ListThingToNoteParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Checked  bool      `json:"checked"`
}

func (q *Queries) ListThingToNote(ctx context.Context, arg ListThingToNoteParams) ([]ThingsToNote, error) {
	rows, err := q.db.Query(ctx, listThingToNote, arg.OptionID, arg.Checked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ThingsToNote{}
	for rows.Next() {
		var i ThingsToNote
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.Checked,
			&i.Tag,
			&i.Type,
			&i.Des,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThingToNoteChecked = `-- name: ListThingToNoteChecked :many
SELECT tag, checked
FROM things_to_notes
WHERE option_id = $1
`

type ListThingToNoteCheckedRow struct {
	Tag     string `json:"tag"`
	Checked bool   `json:"checked"`
}

func (q *Queries) ListThingToNoteChecked(ctx context.Context, optionID uuid.UUID) ([]ListThingToNoteCheckedRow, error) {
	rows, err := q.db.Query(ctx, listThingToNoteChecked, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListThingToNoteCheckedRow{}
	for rows.Next() {
		var i ListThingToNoteCheckedRow
		if err := rows.Scan(&i.Tag, &i.Checked); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThingToNoteOne = `-- name: ListThingToNoteOne :many
SELECT tag, type, checked, id
FROM things_to_notes
WHERE option_id = $1
`

type ListThingToNoteOneRow struct {
	Tag     string    `json:"tag"`
	Type    string    `json:"type"`
	Checked bool      `json:"checked"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) ListThingToNoteOne(ctx context.Context, optionID uuid.UUID) ([]ListThingToNoteOneRow, error) {
	rows, err := q.db.Query(ctx, listThingToNoteOne, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListThingToNoteOneRow{}
	for rows.Next() {
		var i ListThingToNoteOneRow
		if err := rows.Scan(
			&i.Tag,
			&i.Type,
			&i.Checked,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThingToNoteTag = `-- name: ListThingToNoteTag :many
SELECT tag
FROM things_to_notes
WHERE option_id = $1 AND checked = $2
`

type ListThingToNoteTagParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Checked  bool      `json:"checked"`
}

func (q *Queries) ListThingToNoteTag(ctx context.Context, arg ListThingToNoteTagParams) ([]string, error) {
	rows, err := q.db.Query(ctx, listThingToNoteTag, arg.OptionID, arg.Checked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllThingToNote = `-- name: RemoveAllThingToNote :exec
DELETE FROM things_to_notes
WHERE option_id = $1
`

func (q *Queries) RemoveAllThingToNote(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllThingToNote, optionID)
	return err
}

const removeThingToNote = `-- name: RemoveThingToNote :exec
DELETE FROM things_to_notes
WHERE id = $1
`

func (q *Queries) RemoveThingToNote(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeThingToNote, id)
	return err
}

const updateThingToNote = `-- name: UpdateThingToNote :one
UPDATE things_to_notes
    SET checked = $1, 
    updated_at = NOW()
WHERE id = $2
RETURNING tag, type, checked, id
`

type UpdateThingToNoteParams struct {
	Checked bool      `json:"checked"`
	ID      uuid.UUID `json:"id"`
}

type UpdateThingToNoteRow struct {
	Tag     string    `json:"tag"`
	Type    string    `json:"type"`
	Checked bool      `json:"checked"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateThingToNote(ctx context.Context, arg UpdateThingToNoteParams) (UpdateThingToNoteRow, error) {
	row := q.db.QueryRow(ctx, updateThingToNote, arg.Checked, arg.ID)
	var i UpdateThingToNoteRow
	err := row.Scan(
		&i.Tag,
		&i.Type,
		&i.Checked,
		&i.ID,
	)
	return i, err
}

const updateThingToNoteDetail = `-- name: UpdateThingToNoteDetail :one
UPDATE things_to_notes
    SET des = $1,
    updated_at = NOW()
WHERE id = $2 AND option_id = $3
RETURNING id, tag, type, checked, des
`

type UpdateThingToNoteDetailParams struct {
	Des      string    `json:"des"`
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

type UpdateThingToNoteDetailRow struct {
	ID      uuid.UUID `json:"id"`
	Tag     string    `json:"tag"`
	Type    string    `json:"type"`
	Checked bool      `json:"checked"`
	Des     string    `json:"des"`
}

func (q *Queries) UpdateThingToNoteDetail(ctx context.Context, arg UpdateThingToNoteDetailParams) (UpdateThingToNoteDetailRow, error) {
	row := q.db.QueryRow(ctx, updateThingToNoteDetail, arg.Des, arg.ID, arg.OptionID)
	var i UpdateThingToNoteDetailRow
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Type,
		&i.Checked,
		&i.Des,
	)
	return i, err
}

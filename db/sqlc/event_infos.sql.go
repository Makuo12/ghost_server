// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: event_infos.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEventInfo = `-- name: CreateEventInfo :one
INSERT INTO event_infos (
        option_id,
        event_type
    )
VALUES (
        $1, $2
    )
RETURNING option_id, sub_category_type, event_type, created_at, updated_at
`

type CreateEventInfoParams struct {
	OptionID  uuid.UUID `json:"option_id"`
	EventType string    `json:"event_type"`
}

func (q *Queries) CreateEventInfo(ctx context.Context, arg CreateEventInfoParams) (EventInfo, error) {
	row := q.db.QueryRow(ctx, createEventInfo, arg.OptionID, arg.EventType)
	var i EventInfo
	err := row.Scan(
		&i.OptionID,
		&i.SubCategoryType,
		&i.EventType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventInfo = `-- name: GetEventInfo :one
SELECT option_id, sub_category_type, event_type, created_at, updated_at
FROM event_infos
WHERE option_id = $1
`

func (q *Queries) GetEventInfo(ctx context.Context, optionID uuid.UUID) (EventInfo, error) {
	row := q.db.QueryRow(ctx, getEventInfo, optionID)
	var i EventInfo
	err := row.Scan(
		&i.OptionID,
		&i.SubCategoryType,
		&i.EventType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventInfoAnyPolicy = `-- name: GetEventInfoAnyPolicy :one
SELECT e_i.option_id, sub_category_type, event_type, e_i.created_at, e_i.updated_at, c_p.option_id, type_one, type_two, request_a_refund, c_p.created_at, c_p.updated_at
FROM event_infos e_i
   JOIN cancel_policies c_p on c_p.option_id = e_i.option_id
WHERE e_i.option_id = $1
`

type GetEventInfoAnyPolicyRow struct {
	OptionID        uuid.UUID `json:"option_id"`
	SubCategoryType string    `json:"sub_category_type"`
	EventType       string    `json:"event_type"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	OptionID_2      uuid.UUID `json:"option_id_2"`
	TypeOne         string    `json:"type_one"`
	TypeTwo         string    `json:"type_two"`
	RequestARefund  bool      `json:"request_a_refund"`
	CreatedAt_2     time.Time `json:"created_at_2"`
	UpdatedAt_2     time.Time `json:"updated_at_2"`
}

func (q *Queries) GetEventInfoAnyPolicy(ctx context.Context, optionID uuid.UUID) (GetEventInfoAnyPolicyRow, error) {
	row := q.db.QueryRow(ctx, getEventInfoAnyPolicy, optionID)
	var i GetEventInfoAnyPolicyRow
	err := row.Scan(
		&i.OptionID,
		&i.SubCategoryType,
		&i.EventType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OptionID_2,
		&i.TypeOne,
		&i.TypeTwo,
		&i.RequestARefund,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getEventInfoByOption = `-- name: GetEventInfoByOption :one
SELECT option_id, sub_category_type, event_type, e_i.created_at, e_i.updated_at, o_i.id, co_host_id, option_user_id, host_id, o_i.deep_link_id, primary_user_id, o_i.is_active, is_complete, is_verified, category, category_two, category_three, category_four, is_top_seller, time_zone, o_i.currency, option_img, option_type, main_option_type, o_i.created_at, completed, o_i.updated_at, u.id, user_id, firebase_id, public_id, hashed_password, u.deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, u.currency, default_card, default_payout_card, default_account_id, u.is_active, is_deleted, image, password_changed_at, u.created_at, u.updated_at
FROM event_infos e_i
   JOIN options_infos o_i on o_i.id = e_i.option_id
   JOIN users u on u.id = o_i.host_id
WHERE e_i.option_id = $1 AND u.id = $2 AND o_i.is_complete = $3
`

type GetEventInfoByOptionParams struct {
	OptionID   uuid.UUID `json:"option_id"`
	ID         uuid.UUID `json:"id"`
	IsComplete bool      `json:"is_complete"`
}

type GetEventInfoByOptionRow struct {
	OptionID          uuid.UUID `json:"option_id"`
	SubCategoryType   string    `json:"sub_category_type"`
	EventType         string    `json:"event_type"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	ID                uuid.UUID `json:"id"`
	CoHostID          uuid.UUID `json:"co_host_id"`
	OptionUserID      uuid.UUID `json:"option_user_id"`
	HostID            uuid.UUID `json:"host_id"`
	DeepLinkID        uuid.UUID `json:"deep_link_id"`
	PrimaryUserID     uuid.UUID `json:"primary_user_id"`
	IsActive          bool      `json:"is_active"`
	IsComplete        bool      `json:"is_complete"`
	IsVerified        bool      `json:"is_verified"`
	Category          string    `json:"category"`
	CategoryTwo       string    `json:"category_two"`
	CategoryThree     string    `json:"category_three"`
	CategoryFour      string    `json:"category_four"`
	IsTopSeller       bool      `json:"is_top_seller"`
	TimeZone          string    `json:"time_zone"`
	Currency          string    `json:"currency"`
	OptionImg         string    `json:"option_img"`
	OptionType        string    `json:"option_type"`
	MainOptionType    string    `json:"main_option_type"`
	CreatedAt_2       time.Time `json:"created_at_2"`
	Completed         time.Time `json:"completed"`
	UpdatedAt_2       time.Time `json:"updated_at_2"`
	ID_2              uuid.UUID `json:"id_2"`
	UserID            uuid.UUID `json:"user_id"`
	FirebaseID        uuid.UUID `json:"firebase_id"`
	PublicID          uuid.UUID `json:"public_id"`
	HashedPassword    string    `json:"hashed_password"`
	DeepLinkID_2      uuid.UUID `json:"deep_link_id_2"`
	FirebasePassword  string    `json:"firebase_password"`
	Email             string    `json:"email"`
	PhoneNumber       string    `json:"phone_number"`
	FirstName         string    `json:"first_name"`
	Username          string    `json:"username"`
	LastName          string    `json:"last_name"`
	DateOfBirth       time.Time `json:"date_of_birth"`
	DialCode          string    `json:"dial_code"`
	DialCountry       string    `json:"dial_country"`
	CurrentOptionID   string    `json:"current_option_id"`
	Currency_2        string    `json:"currency_2"`
	DefaultCard       string    `json:"default_card"`
	DefaultPayoutCard string    `json:"default_payout_card"`
	DefaultAccountID  string    `json:"default_account_id"`
	IsActive_2        bool      `json:"is_active_2"`
	IsDeleted         bool      `json:"is_deleted"`
	Image             string    `json:"image"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt_3       time.Time `json:"created_at_3"`
	UpdatedAt_3       time.Time `json:"updated_at_3"`
}

func (q *Queries) GetEventInfoByOption(ctx context.Context, arg GetEventInfoByOptionParams) (GetEventInfoByOptionRow, error) {
	row := q.db.QueryRow(ctx, getEventInfoByOption, arg.OptionID, arg.ID, arg.IsComplete)
	var i GetEventInfoByOptionRow
	err := row.Scan(
		&i.OptionID,
		&i.SubCategoryType,
		&i.EventType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.CoHostID,
		&i.OptionUserID,
		&i.HostID,
		&i.DeepLinkID,
		&i.PrimaryUserID,
		&i.IsActive,
		&i.IsComplete,
		&i.IsVerified,
		&i.Category,
		&i.CategoryTwo,
		&i.CategoryThree,
		&i.CategoryFour,
		&i.IsTopSeller,
		&i.TimeZone,
		&i.Currency,
		&i.OptionImg,
		&i.OptionType,
		&i.MainOptionType,
		&i.CreatedAt_2,
		&i.Completed,
		&i.UpdatedAt_2,
		&i.ID_2,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID_2,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency_2,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive_2,
		&i.IsDeleted,
		&i.Image,
		&i.PasswordChangedAt,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
	)
	return i, err
}

const removeEventInfo = `-- name: RemoveEventInfo :exec
DELETE FROM event_infos
WHERE option_id=$1
`

func (q *Queries) RemoveEventInfo(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeEventInfo, optionID)
	return err
}

const updateEventInfo = `-- name: UpdateEventInfo :one
UPDATE event_infos
SET 
    event_type = COALESCE($1, event_type),
    sub_category_type = COALESCE($2, sub_category_type),
    updated_at = NOW()
WHERE option_id = $3 
RETURNING option_id, sub_category_type, event_type, created_at, updated_at
`

type UpdateEventInfoParams struct {
	EventType       pgtype.Text `json:"event_type"`
	SubCategoryType pgtype.Text `json:"sub_category_type"`
	OptionID        uuid.UUID   `json:"option_id"`
}

func (q *Queries) UpdateEventInfo(ctx context.Context, arg UpdateEventInfoParams) (EventInfo, error) {
	row := q.db.QueryRow(ctx, updateEventInfo, arg.EventType, arg.SubCategoryType, arg.OptionID)
	var i EventInfo
	err := row.Scan(
		&i.OptionID,
		&i.SubCategoryType,
		&i.EventType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

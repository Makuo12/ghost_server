// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: event_check_in_steps.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createEventCheckInStep = `-- name: CreateEventCheckInStep :one
INSERT INTO event_check_in_steps (
        event_date_time_id,
        image,
        des
    )
VALUES (
        $1, $2, $3
    )
RETURNING id, event_date_time_id, image, des, created_at, updated_at
`

type CreateEventCheckInStepParams struct {
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	Image           string    `json:"image"`
	Des             string    `json:"des"`
}

func (q *Queries) CreateEventCheckInStep(ctx context.Context, arg CreateEventCheckInStepParams) (EventCheckInStep, error) {
	row := q.db.QueryRow(ctx, createEventCheckInStep, arg.EventDateTimeID, arg.Image, arg.Des)
	var i EventCheckInStep
	err := row.Scan(
		&i.ID,
		&i.EventDateTimeID,
		&i.Image,
		&i.Des,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventCheckInStep = `-- name: GetEventCheckInStep :one
SELECT des, image
FROM event_check_in_steps
WHERE id = $1 AND event_date_time_id=$2
`

type GetEventCheckInStepParams struct {
	ID              uuid.UUID `json:"id"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
}

type GetEventCheckInStepRow struct {
	Des   string `json:"des"`
	Image string `json:"image"`
}

func (q *Queries) GetEventCheckInStep(ctx context.Context, arg GetEventCheckInStepParams) (GetEventCheckInStepRow, error) {
	row := q.db.QueryRow(ctx, getEventCheckInStep, arg.ID, arg.EventDateTimeID)
	var i GetEventCheckInStepRow
	err := row.Scan(&i.Des, &i.Image)
	return i, err
}

const listEventCheckInStepByAdmin = `-- name: ListEventCheckInStepByAdmin :many
SELECT id, event_date_time_id, image, des, created_at, updated_at
FROM event_check_in_steps
`

func (q *Queries) ListEventCheckInStepByAdmin(ctx context.Context) ([]EventCheckInStep, error) {
	rows, err := q.db.Query(ctx, listEventCheckInStepByAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventCheckInStep{}
	for rows.Next() {
		var i EventCheckInStep
		if err := rows.Scan(
			&i.ID,
			&i.EventDateTimeID,
			&i.Image,
			&i.Des,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventCheckInStepImage = `-- name: ListEventCheckInStepImage :many
SELECT image
FROM event_check_in_steps
WHERE event_date_time_id = $1
ORDER BY created_at
`

func (q *Queries) ListEventCheckInStepImage(ctx context.Context, eventDateTimeID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, listEventCheckInStepImage, eventDateTimeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var image string
		if err := rows.Scan(&image); err != nil {
			return nil, err
		}
		items = append(items, image)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventCheckInStepOrdered = `-- name: ListEventCheckInStepOrdered :many
SELECT des, image, id
FROM event_check_in_steps
WHERE event_date_time_id = $1
ORDER BY created_at
`

type ListEventCheckInStepOrderedRow struct {
	Des   string    `json:"des"`
	Image string    `json:"image"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) ListEventCheckInStepOrdered(ctx context.Context, eventDateTimeID uuid.UUID) ([]ListEventCheckInStepOrderedRow, error) {
	rows, err := q.db.Query(ctx, listEventCheckInStepOrdered, eventDateTimeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventCheckInStepOrderedRow{}
	for rows.Next() {
		var i ListEventCheckInStepOrderedRow
		if err := rows.Scan(&i.Des, &i.Image, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllEventCheckInStep = `-- name: RemoveAllEventCheckInStep :exec
DELETE FROM event_check_in_steps 
WHERE event_date_time_id = $1
`

func (q *Queries) RemoveAllEventCheckInStep(ctx context.Context, eventDateTimeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllEventCheckInStep, eventDateTimeID)
	return err
}

const removeEventCheckInStep = `-- name: RemoveEventCheckInStep :exec
DELETE FROM event_check_in_steps 
WHERE event_date_time_id = $1 AND id = $2
`

type RemoveEventCheckInStepParams struct {
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	ID              uuid.UUID `json:"id"`
}

func (q *Queries) RemoveEventCheckInStep(ctx context.Context, arg RemoveEventCheckInStepParams) error {
	_, err := q.db.Exec(ctx, removeEventCheckInStep, arg.EventDateTimeID, arg.ID)
	return err
}

const updateEventCheckInStepDes = `-- name: UpdateEventCheckInStepDes :one
UPDATE event_check_in_steps
    SET des = $1, 
    updated_at = NOW()
WHERE id = $2 AND event_date_time_id = $3
RETURNING des, image, id
`

type UpdateEventCheckInStepDesParams struct {
	Des             string    `json:"des"`
	ID              uuid.UUID `json:"id"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
}

type UpdateEventCheckInStepDesRow struct {
	Des   string    `json:"des"`
	Image string    `json:"image"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateEventCheckInStepDes(ctx context.Context, arg UpdateEventCheckInStepDesParams) (UpdateEventCheckInStepDesRow, error) {
	row := q.db.QueryRow(ctx, updateEventCheckInStepDes, arg.Des, arg.ID, arg.EventDateTimeID)
	var i UpdateEventCheckInStepDesRow
	err := row.Scan(&i.Des, &i.Image, &i.ID)
	return i, err
}

const updateEventCheckInStepImage = `-- name: UpdateEventCheckInStepImage :one
UPDATE event_check_in_steps
    SET image = $1, 
    updated_at = NOW()
WHERE id = $2 AND event_date_time_id = $3
RETURNING des, image, id
`

type UpdateEventCheckInStepImageParams struct {
	Image           string    `json:"image"`
	ID              uuid.UUID `json:"id"`
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
}

type UpdateEventCheckInStepImageRow struct {
	Des   string    `json:"des"`
	Image string    `json:"image"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateEventCheckInStepImage(ctx context.Context, arg UpdateEventCheckInStepImageParams) (UpdateEventCheckInStepImageRow, error) {
	row := q.db.QueryRow(ctx, updateEventCheckInStepImage, arg.Image, arg.ID, arg.EventDateTimeID)
	var i UpdateEventCheckInStepImageRow
	err := row.Scan(&i.Des, &i.Image, &i.ID)
	return i, err
}

const updateEventCheckInStepPublicImage = `-- name: UpdateEventCheckInStepPublicImage :one
UPDATE event_check_in_steps
    SET image = $1, 
    updated_at = NOW()
WHERE id = $2
RETURNING des, image, id
`

type UpdateEventCheckInStepPublicImageParams struct {
	Image string    `json:"image"`
	ID    uuid.UUID `json:"id"`
}

type UpdateEventCheckInStepPublicImageRow struct {
	Des   string    `json:"des"`
	Image string    `json:"image"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateEventCheckInStepPublicImage(ctx context.Context, arg UpdateEventCheckInStepPublicImageParams) (UpdateEventCheckInStepPublicImageRow, error) {
	row := q.db.QueryRow(ctx, updateEventCheckInStepPublicImage, arg.Image, arg.ID)
	var i UpdateEventCheckInStepPublicImageRow
	err := row.Scan(&i.Des, &i.Image, &i.ID)
	return i, err
}

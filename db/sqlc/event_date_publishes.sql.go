// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: event_date_publishes.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEventDatePublish = `-- name: CreateEventDatePublish :one
INSERT INTO event_date_publishes (
        event_date_time_id,
        event_going_public_date,
        event_going_public_time
    )
VALUES (
        $1, $2, $3
    )
RETURNING event_date_time_id, event_public, event_going_public, event_going_public_date, event_going_public_time, created_at, updated_at
`

type CreateEventDatePublishParams struct {
	EventDateTimeID      uuid.UUID `json:"event_date_time_id"`
	EventGoingPublicDate time.Time `json:"event_going_public_date"`
	EventGoingPublicTime time.Time `json:"event_going_public_time"`
}

func (q *Queries) CreateEventDatePublish(ctx context.Context, arg CreateEventDatePublishParams) (EventDatePublish, error) {
	row := q.db.QueryRow(ctx, createEventDatePublish, arg.EventDateTimeID, arg.EventGoingPublicDate, arg.EventGoingPublicTime)
	var i EventDatePublish
	err := row.Scan(
		&i.EventDateTimeID,
		&i.EventPublic,
		&i.EventGoingPublic,
		&i.EventGoingPublicDate,
		&i.EventGoingPublicTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventDatePublish = `-- name: GetEventDatePublish :one
SELECT event_public, event_going_public, event_going_public_time, event_going_public_date, event_date_time_id
FROM event_date_publishes
WHERE event_date_time_id = $1
`

type GetEventDatePublishRow struct {
	EventPublic          string    `json:"event_public"`
	EventGoingPublic     string    `json:"event_going_public"`
	EventGoingPublicTime time.Time `json:"event_going_public_time"`
	EventGoingPublicDate time.Time `json:"event_going_public_date"`
	EventDateTimeID      uuid.UUID `json:"event_date_time_id"`
}

func (q *Queries) GetEventDatePublish(ctx context.Context, eventDateTimeID uuid.UUID) (GetEventDatePublishRow, error) {
	row := q.db.QueryRow(ctx, getEventDatePublish, eventDateTimeID)
	var i GetEventDatePublishRow
	err := row.Scan(
		&i.EventPublic,
		&i.EventGoingPublic,
		&i.EventGoingPublicTime,
		&i.EventGoingPublicDate,
		&i.EventDateTimeID,
	)
	return i, err
}

const getEventDatePublishByOption = `-- name: GetEventDatePublishByOption :one
SELECT event_date_time_id, event_public, event_going_public, event_going_public_date, event_going_public_time, e_d_p.created_at, e_d_p.updated_at, e_d_i.id, event_info_id, start_date, name, publish_check_in_steps, check_in_method, event_dates, e_d_i.deep_link_id, type, e_d_i.is_active, need_bands, need_tickets, absorb_band_charge, status, note, end_date, e_d_i.created_at, e_d_i.updated_at, o_i.id, co_host_id, option_user_id, host_id, o_i.deep_link_id, primary_user_id, o_i.is_active, is_complete, is_verified, category, category_two, category_three, category_four, is_top_seller, time_zone, o_i.currency, option_img, option_type, main_option_type, o_i.created_at, completed, o_i.updated_at, u.id, user_id, firebase_id, public_id, hashed_password, u.deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, u.currency, default_card, default_payout_card, default_account_id, u.is_active, is_deleted, image, password_changed_at, u.created_at, u.updated_at
FROM event_date_publishes e_d_p
    JOIN event_date_times e_d_i on e_d_i.id = e_d_p.event_date_time_id
    JOIN options_infos o_i on o_i.id = e_d_p.event_date_time_id
    JOIN users u on u.id = o_i.host_id
WHERE e_d_p.event_date_time_id = $1 AND u.id = $2 AND o_i.is_complete = $3 AND e_d_i.is_active = true
`

type GetEventDatePublishByOptionParams struct {
	EventDateTimeID uuid.UUID `json:"event_date_time_id"`
	ID              uuid.UUID `json:"id"`
	IsComplete      bool      `json:"is_complete"`
}

type GetEventDatePublishByOptionRow struct {
	EventDateTimeID      uuid.UUID `json:"event_date_time_id"`
	EventPublic          string    `json:"event_public"`
	EventGoingPublic     string    `json:"event_going_public"`
	EventGoingPublicDate time.Time `json:"event_going_public_date"`
	EventGoingPublicTime time.Time `json:"event_going_public_time"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
	ID                   uuid.UUID `json:"id"`
	EventInfoID          uuid.UUID `json:"event_info_id"`
	StartDate            time.Time `json:"start_date"`
	Name                 string    `json:"name"`
	PublishCheckInSteps  bool      `json:"publish_check_in_steps"`
	CheckInMethod        string    `json:"check_in_method"`
	EventDates           []string  `json:"event_dates"`
	DeepLinkID           uuid.UUID `json:"deep_link_id"`
	Type                 string    `json:"type"`
	IsActive             bool      `json:"is_active"`
	NeedBands            bool      `json:"need_bands"`
	NeedTickets          bool      `json:"need_tickets"`
	AbsorbBandCharge     bool      `json:"absorb_band_charge"`
	Status               string    `json:"status"`
	Note                 string    `json:"note"`
	EndDate              time.Time `json:"end_date"`
	CreatedAt_2          time.Time `json:"created_at_2"`
	UpdatedAt_2          time.Time `json:"updated_at_2"`
	ID_2                 uuid.UUID `json:"id_2"`
	CoHostID             uuid.UUID `json:"co_host_id"`
	OptionUserID         uuid.UUID `json:"option_user_id"`
	HostID               uuid.UUID `json:"host_id"`
	DeepLinkID_2         uuid.UUID `json:"deep_link_id_2"`
	PrimaryUserID        uuid.UUID `json:"primary_user_id"`
	IsActive_2           bool      `json:"is_active_2"`
	IsComplete           bool      `json:"is_complete"`
	IsVerified           bool      `json:"is_verified"`
	Category             string    `json:"category"`
	CategoryTwo          string    `json:"category_two"`
	CategoryThree        string    `json:"category_three"`
	CategoryFour         string    `json:"category_four"`
	IsTopSeller          bool      `json:"is_top_seller"`
	TimeZone             string    `json:"time_zone"`
	Currency             string    `json:"currency"`
	OptionImg            string    `json:"option_img"`
	OptionType           string    `json:"option_type"`
	MainOptionType       string    `json:"main_option_type"`
	CreatedAt_3          time.Time `json:"created_at_3"`
	Completed            time.Time `json:"completed"`
	UpdatedAt_3          time.Time `json:"updated_at_3"`
	ID_3                 uuid.UUID `json:"id_3"`
	UserID               uuid.UUID `json:"user_id"`
	FirebaseID           uuid.UUID `json:"firebase_id"`
	PublicID             uuid.UUID `json:"public_id"`
	HashedPassword       string    `json:"hashed_password"`
	DeepLinkID_3         uuid.UUID `json:"deep_link_id_3"`
	FirebasePassword     string    `json:"firebase_password"`
	Email                string    `json:"email"`
	PhoneNumber          string    `json:"phone_number"`
	FirstName            string    `json:"first_name"`
	Username             string    `json:"username"`
	LastName             string    `json:"last_name"`
	DateOfBirth          time.Time `json:"date_of_birth"`
	DialCode             string    `json:"dial_code"`
	DialCountry          string    `json:"dial_country"`
	CurrentOptionID      string    `json:"current_option_id"`
	Currency_2           string    `json:"currency_2"`
	DefaultCard          string    `json:"default_card"`
	DefaultPayoutCard    string    `json:"default_payout_card"`
	DefaultAccountID     string    `json:"default_account_id"`
	IsActive_3           bool      `json:"is_active_3"`
	IsDeleted            bool      `json:"is_deleted"`
	Image                string    `json:"image"`
	PasswordChangedAt    time.Time `json:"password_changed_at"`
	CreatedAt_4          time.Time `json:"created_at_4"`
	UpdatedAt_4          time.Time `json:"updated_at_4"`
}

func (q *Queries) GetEventDatePublishByOption(ctx context.Context, arg GetEventDatePublishByOptionParams) (GetEventDatePublishByOptionRow, error) {
	row := q.db.QueryRow(ctx, getEventDatePublishByOption, arg.EventDateTimeID, arg.ID, arg.IsComplete)
	var i GetEventDatePublishByOptionRow
	err := row.Scan(
		&i.EventDateTimeID,
		&i.EventPublic,
		&i.EventGoingPublic,
		&i.EventGoingPublicDate,
		&i.EventGoingPublicTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.EventInfoID,
		&i.StartDate,
		&i.Name,
		&i.PublishCheckInSteps,
		&i.CheckInMethod,
		&i.EventDates,
		&i.DeepLinkID,
		&i.Type,
		&i.IsActive,
		&i.NeedBands,
		&i.NeedTickets,
		&i.AbsorbBandCharge,
		&i.Status,
		&i.Note,
		&i.EndDate,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.ID_2,
		&i.CoHostID,
		&i.OptionUserID,
		&i.HostID,
		&i.DeepLinkID_2,
		&i.PrimaryUserID,
		&i.IsActive_2,
		&i.IsComplete,
		&i.IsVerified,
		&i.Category,
		&i.CategoryTwo,
		&i.CategoryThree,
		&i.CategoryFour,
		&i.IsTopSeller,
		&i.TimeZone,
		&i.Currency,
		&i.OptionImg,
		&i.OptionType,
		&i.MainOptionType,
		&i.CreatedAt_3,
		&i.Completed,
		&i.UpdatedAt_3,
		&i.ID_3,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID_3,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency_2,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive_3,
		&i.IsDeleted,
		&i.Image,
		&i.PasswordChangedAt,
		&i.CreatedAt_4,
		&i.UpdatedAt_4,
	)
	return i, err
}

const removeEventDatePublish = `-- name: RemoveEventDatePublish :exec
DELETE FROM event_date_publishes
WHERE event_date_time_id = $1
`

func (q *Queries) RemoveEventDatePublish(ctx context.Context, eventDateTimeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeEventDatePublish, eventDateTimeID)
	return err
}

const updateEventDatePublish = `-- name: UpdateEventDatePublish :one
UPDATE event_date_publishes
SET 
   event_public = $1,
   event_going_public = $2,
   event_going_public_date = $3,
   event_going_public_time = $4,
   updated_at = NOW()
WHERE event_date_time_id = $5
RETURNING event_date_time_id, event_public, event_going_public, event_going_public_date, event_going_public_time, created_at, updated_at
`

type UpdateEventDatePublishParams struct {
	EventPublic          string    `json:"event_public"`
	EventGoingPublic     string    `json:"event_going_public"`
	EventGoingPublicDate time.Time `json:"event_going_public_date"`
	EventGoingPublicTime time.Time `json:"event_going_public_time"`
	EventDateTimeID      uuid.UUID `json:"event_date_time_id"`
}

func (q *Queries) UpdateEventDatePublish(ctx context.Context, arg UpdateEventDatePublishParams) (EventDatePublish, error) {
	row := q.db.QueryRow(ctx, updateEventDatePublish,
		arg.EventPublic,
		arg.EventGoingPublic,
		arg.EventGoingPublicDate,
		arg.EventGoingPublicTime,
		arg.EventDateTimeID,
	)
	var i EventDatePublish
	err := row.Scan(
		&i.EventDateTimeID,
		&i.EventPublic,
		&i.EventGoingPublic,
		&i.EventGoingPublicDate,
		&i.EventGoingPublicTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEventDatePublishTwo = `-- name: UpdateEventDatePublishTwo :one
UPDATE event_date_publishes
SET 
   event_public = COALESCE($1, event_public),
   event_going_public = COALESCE($2, event_going_public),
   event_going_public_date = COALESCE($3, event_going_public_date),
   event_going_public_time = COALESCE($4, event_going_public_time),
   updated_at = NOW()
WHERE event_date_time_id = $5
RETURNING event_public, event_going_public, event_going_public_time, event_going_public_date, event_date_time_id
`

type UpdateEventDatePublishTwoParams struct {
	EventPublic          pgtype.Text `json:"event_public"`
	EventGoingPublic     pgtype.Text `json:"event_going_public"`
	EventGoingPublicDate pgtype.Date `json:"event_going_public_date"`
	EventGoingPublicTime pgtype.Time `json:"event_going_public_time"`
	EventDateTimeID      uuid.UUID   `json:"event_date_time_id"`
}

type UpdateEventDatePublishTwoRow struct {
	EventPublic          string    `json:"event_public"`
	EventGoingPublic     string    `json:"event_going_public"`
	EventGoingPublicTime time.Time `json:"event_going_public_time"`
	EventGoingPublicDate time.Time `json:"event_going_public_date"`
	EventDateTimeID      uuid.UUID `json:"event_date_time_id"`
}

func (q *Queries) UpdateEventDatePublishTwo(ctx context.Context, arg UpdateEventDatePublishTwoParams) (UpdateEventDatePublishTwoRow, error) {
	row := q.db.QueryRow(ctx, updateEventDatePublishTwo,
		arg.EventPublic,
		arg.EventGoingPublic,
		arg.EventGoingPublicDate,
		arg.EventGoingPublicTime,
		arg.EventDateTimeID,
	)
	var i UpdateEventDatePublishTwoRow
	err := row.Scan(
		&i.EventPublic,
		&i.EventGoingPublic,
		&i.EventGoingPublicTime,
		&i.EventGoingPublicDate,
		&i.EventDateTimeID,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: account_numbers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAccountNumber = `-- name: CreateAccountNumber :one
INSERT INTO account_numbers (
    user_id,
    account_number,
    account_name,
    bank_name,
    bank_code,
    country,
    currency,
    recipient_code,
    type,
    bank_id
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, user_id, account_number, currency, account_name, recipient_code, bank_name, bank_code, country, type, bank_id
`

type CreateAccountNumberParams struct {
	UserID        uuid.UUID `json:"user_id"`
	AccountNumber string    `json:"account_number"`
	AccountName   string    `json:"account_name"`
	BankName      string    `json:"bank_name"`
	BankCode      string    `json:"bank_code"`
	Country       string    `json:"country"`
	Currency      string    `json:"currency"`
	RecipientCode string    `json:"recipient_code"`
	Type          string    `json:"type"`
	BankID        int32     `json:"bank_id"`
}

func (q *Queries) CreateAccountNumber(ctx context.Context, arg CreateAccountNumberParams) (AccountNumber, error) {
	row := q.db.QueryRow(ctx, createAccountNumber,
		arg.UserID,
		arg.AccountNumber,
		arg.AccountName,
		arg.BankName,
		arg.BankCode,
		arg.Country,
		arg.Currency,
		arg.RecipientCode,
		arg.Type,
		arg.BankID,
	)
	var i AccountNumber
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountNumber,
		&i.Currency,
		&i.AccountName,
		&i.RecipientCode,
		&i.BankName,
		&i.BankCode,
		&i.Country,
		&i.Type,
		&i.BankID,
	)
	return i, err
}

const getAccountNumberAny = `-- name: GetAccountNumberAny :one
SELECT account_number, recipient_code
FROM account_numbers
WHERE user_id = $1
`

type GetAccountNumberAnyRow struct {
	AccountNumber string `json:"account_number"`
	RecipientCode string `json:"recipient_code"`
}

func (q *Queries) GetAccountNumberAny(ctx context.Context, userID uuid.UUID) (GetAccountNumberAnyRow, error) {
	row := q.db.QueryRow(ctx, getAccountNumberAny, userID)
	var i GetAccountNumberAnyRow
	err := row.Scan(&i.AccountNumber, &i.RecipientCode)
	return i, err
}

const getDefaultAccountNumber = `-- name: GetDefaultAccountNumber :one
SELECT account_number, recipient_code
FROM account_numbers
WHERE user_id = $1 AND id = $2
`

type GetDefaultAccountNumberParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

type GetDefaultAccountNumberRow struct {
	AccountNumber string `json:"account_number"`
	RecipientCode string `json:"recipient_code"`
}

func (q *Queries) GetDefaultAccountNumber(ctx context.Context, arg GetDefaultAccountNumberParams) (GetDefaultAccountNumberRow, error) {
	row := q.db.QueryRow(ctx, getDefaultAccountNumber, arg.UserID, arg.ID)
	var i GetDefaultAccountNumberRow
	err := row.Scan(&i.AccountNumber, &i.RecipientCode)
	return i, err
}

const listAccountNumber = `-- name: ListAccountNumber :many
SELECT account_number, id, bank_name, currency, account_name 
FROM account_numbers
WHERE user_id = $1
`

type ListAccountNumberRow struct {
	AccountNumber string    `json:"account_number"`
	ID            uuid.UUID `json:"id"`
	BankName      string    `json:"bank_name"`
	Currency      string    `json:"currency"`
	AccountName   string    `json:"account_name"`
}

func (q *Queries) ListAccountNumber(ctx context.Context, userID uuid.UUID) ([]ListAccountNumberRow, error) {
	rows, err := q.db.Query(ctx, listAccountNumber, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountNumberRow{}
	for rows.Next() {
		var i ListAccountNumberRow
		if err := rows.Scan(
			&i.AccountNumber,
			&i.ID,
			&i.BankName,
			&i.Currency,
			&i.AccountName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAccountNumber = `-- name: RemoveAccountNumber :exec
DELETE  FROM account_numbers WHERE user_id = $1 AND id = $2
`

type RemoveAccountNumberParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) RemoveAccountNumber(ctx context.Context, arg RemoveAccountNumberParams) error {
	_, err := q.db.Exec(ctx, removeAccountNumber, arg.UserID, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: space_areas.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSpaceArea = `-- name: CreateSpaceArea :one
INSERT INTO space_areas (
      option_id,
      shared_space,
      space_type,
      photos,
      beds
   )
VALUES (
      $1,
      $2,
      $3,
      $4,
      $5
   )
RETURNING id, option_id, shared_space, space_type, photos, beds, is_suite, created_at, updated_at
`

type CreateSpaceAreaParams struct {
	OptionID    uuid.UUID `json:"option_id"`
	SharedSpace bool      `json:"shared_space"`
	SpaceType   string    `json:"space_type"`
	Photos      []string  `json:"photos"`
	Beds        []string  `json:"beds"`
}

func (q *Queries) CreateSpaceArea(ctx context.Context, arg CreateSpaceAreaParams) (SpaceArea, error) {
	row := q.db.QueryRow(ctx, createSpaceArea,
		arg.OptionID,
		arg.SharedSpace,
		arg.SpaceType,
		arg.Photos,
		arg.Beds,
	)
	var i SpaceArea
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.SharedSpace,
		&i.SpaceType,
		&i.Photos,
		&i.Beds,
		&i.IsSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSpaceArea = `-- name: GetSpaceArea :one
SELECT id, option_id, shared_space, space_type, photos, beds, is_suite, created_at, updated_at
FROM space_areas
WHERE id = $1 AND option_id = $2
LIMIT 1
`

type GetSpaceAreaParams struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

func (q *Queries) GetSpaceArea(ctx context.Context, arg GetSpaceAreaParams) (SpaceArea, error) {
	row := q.db.QueryRow(ctx, getSpaceArea, arg.ID, arg.OptionID)
	var i SpaceArea
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.SharedSpace,
		&i.SpaceType,
		&i.Photos,
		&i.Beds,
		&i.IsSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSpaceAreaType = `-- name: GetSpaceAreaType :many
SELECT space_type 
FROM space_areas
WHERE option_id = $1
`

func (q *Queries) GetSpaceAreaType(ctx context.Context, optionID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getSpaceAreaType, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var space_type string
		if err := rows.Scan(&space_type); err != nil {
			return nil, err
		}
		items = append(items, space_type)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderedSpaceArea = `-- name: ListOrderedSpaceArea :many
SELECT id, option_id, shared_space, space_type, photos, beds, is_suite, created_at, updated_at
FROM space_areas
WHERE option_id = $1
ORDER BY space_type, created_at
`

func (q *Queries) ListOrderedSpaceArea(ctx context.Context, optionID uuid.UUID) ([]SpaceArea, error) {
	rows, err := q.db.Query(ctx, listOrderedSpaceArea, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SpaceArea{}
	for rows.Next() {
		var i SpaceArea
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.SharedSpace,
			&i.SpaceType,
			&i.Photos,
			&i.Beds,
			&i.IsSuite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpaceArea = `-- name: ListSpaceArea :many
SELECT id, option_id, shared_space, space_type, photos, beds, is_suite, created_at, updated_at
FROM space_areas
WHERE option_id = $1
`

func (q *Queries) ListSpaceArea(ctx context.Context, optionID uuid.UUID) ([]SpaceArea, error) {
	rows, err := q.db.Query(ctx, listSpaceArea, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SpaceArea{}
	for rows.Next() {
		var i SpaceArea
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.SharedSpace,
			&i.SpaceType,
			&i.Photos,
			&i.Beds,
			&i.IsSuite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpaceAreaPhotos = `-- name: ListSpaceAreaPhotos :many
SELECT photos
FROM space_areas
WHERE option_id = $1 AND id != $2
`

type ListSpaceAreaPhotosParams struct {
	OptionID uuid.UUID `json:"option_id"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) ListSpaceAreaPhotos(ctx context.Context, arg ListSpaceAreaPhotosParams) ([][]string, error) {
	rows, err := q.db.Query(ctx, listSpaceAreaPhotos, arg.OptionID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]string{}
	for rows.Next() {
		var photos []string
		if err := rows.Scan(&photos); err != nil {
			return nil, err
		}
		items = append(items, photos)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpaceAreaType = `-- name: ListSpaceAreaType :many
SELECT space_type
FROM space_areas
WHERE option_id = $1
`

func (q *Queries) ListSpaceAreaType(ctx context.Context, optionID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, listSpaceAreaType, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var space_type string
		if err := rows.Scan(&space_type); err != nil {
			return nil, err
		}
		items = append(items, space_type)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSpaceArea = `-- name: RemoveSpaceArea :exec
DELETE FROM space_areas
WHERE id = $1 AND option_id = $2
`

type RemoveSpaceAreaParams struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

func (q *Queries) RemoveSpaceArea(ctx context.Context, arg RemoveSpaceAreaParams) error {
	_, err := q.db.Exec(ctx, removeSpaceArea, arg.ID, arg.OptionID)
	return err
}

const removeSpaceAreaAll = `-- name: RemoveSpaceAreaAll :exec
DELETE FROM space_areas
WHERE option_id = $1
`

func (q *Queries) RemoveSpaceAreaAll(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeSpaceAreaAll, optionID)
	return err
}

const updateSpaceAreaBeds = `-- name: UpdateSpaceAreaBeds :one
UPDATE space_areas
SET 
   beds = $2,
   updated_at = NOW()
WHERE id = $1 
RETURNING id, option_id, shared_space, space_type, photos, beds, is_suite, created_at, updated_at
`

type UpdateSpaceAreaBedsParams struct {
	ID   uuid.UUID `json:"id"`
	Beds []string  `json:"beds"`
}

func (q *Queries) UpdateSpaceAreaBeds(ctx context.Context, arg UpdateSpaceAreaBedsParams) (SpaceArea, error) {
	row := q.db.QueryRow(ctx, updateSpaceAreaBeds, arg.ID, arg.Beds)
	var i SpaceArea
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.SharedSpace,
		&i.SpaceType,
		&i.Photos,
		&i.Beds,
		&i.IsSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSpaceAreaInfo = `-- name: UpdateSpaceAreaInfo :one
UPDATE space_areas
SET 
   shared_space = COALESCE($1, shared_space),
   space_type = COALESCE($2, space_type),
   is_suite = COALESCE($3, is_suite),
   updated_at = NOW()
WHERE id = $4 AND option_id =  $5
RETURNING id, option_id, shared_space, space_type, photos, beds, is_suite, created_at, updated_at
`

type UpdateSpaceAreaInfoParams struct {
	SharedSpace pgtype.Bool `json:"shared_space"`
	SpaceType   pgtype.Text `json:"space_type"`
	IsSuite     pgtype.Bool `json:"is_suite"`
	ID          uuid.UUID   `json:"id"`
	OptionID    uuid.UUID   `json:"option_id"`
}

func (q *Queries) UpdateSpaceAreaInfo(ctx context.Context, arg UpdateSpaceAreaInfoParams) (SpaceArea, error) {
	row := q.db.QueryRow(ctx, updateSpaceAreaInfo,
		arg.SharedSpace,
		arg.SpaceType,
		arg.IsSuite,
		arg.ID,
		arg.OptionID,
	)
	var i SpaceArea
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.SharedSpace,
		&i.SpaceType,
		&i.Photos,
		&i.Beds,
		&i.IsSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSpaceAreaPhotos = `-- name: UpdateSpaceAreaPhotos :one
UPDATE space_areas
SET 
   photos = $2,
   updated_at = NOW()
WHERE id = $1 
RETURNING id, option_id, shared_space, space_type, photos, beds, is_suite, created_at, updated_at
`

type UpdateSpaceAreaPhotosParams struct {
	ID     uuid.UUID `json:"id"`
	Photos []string  `json:"photos"`
}

func (q *Queries) UpdateSpaceAreaPhotos(ctx context.Context, arg UpdateSpaceAreaPhotosParams) (SpaceArea, error) {
	row := q.db.QueryRow(ctx, updateSpaceAreaPhotos, arg.ID, arg.Photos)
	var i SpaceArea
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.SharedSpace,
		&i.SpaceType,
		&i.Photos,
		&i.Beds,
		&i.IsSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

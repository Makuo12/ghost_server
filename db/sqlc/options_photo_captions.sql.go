// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: options_photo_captions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOptionPhotoCaption = `-- name: CreateOptionPhotoCaption :one
INSERT INTO options_photo_captions (
    option_id,
    photo_id,
    caption
)
VALUES ($1, $2, $3)
RETURNING photo_id, caption
`

type CreateOptionPhotoCaptionParams struct {
	OptionID uuid.UUID `json:"option_id"`
	PhotoID  string    `json:"photo_id"`
	Caption  string    `json:"caption"`
}

type CreateOptionPhotoCaptionRow struct {
	PhotoID string `json:"photo_id"`
	Caption string `json:"caption"`
}

func (q *Queries) CreateOptionPhotoCaption(ctx context.Context, arg CreateOptionPhotoCaptionParams) (CreateOptionPhotoCaptionRow, error) {
	row := q.db.QueryRow(ctx, createOptionPhotoCaption, arg.OptionID, arg.PhotoID, arg.Caption)
	var i CreateOptionPhotoCaptionRow
	err := row.Scan(&i.PhotoID, &i.Caption)
	return i, err
}

const getOptionPhotoCaption = `-- name: GetOptionPhotoCaption :one
SELECT photo_id, caption
FROM options_photo_captions
WHERE option_id = $1 AND photo_id = $2
`

type GetOptionPhotoCaptionParams struct {
	OptionID uuid.UUID `json:"option_id"`
	PhotoID  string    `json:"photo_id"`
}

type GetOptionPhotoCaptionRow struct {
	PhotoID string `json:"photo_id"`
	Caption string `json:"caption"`
}

func (q *Queries) GetOptionPhotoCaption(ctx context.Context, arg GetOptionPhotoCaptionParams) (GetOptionPhotoCaptionRow, error) {
	row := q.db.QueryRow(ctx, getOptionPhotoCaption, arg.OptionID, arg.PhotoID)
	var i GetOptionPhotoCaptionRow
	err := row.Scan(&i.PhotoID, &i.Caption)
	return i, err
}

const listOptionPhotoCaption = `-- name: ListOptionPhotoCaption :many
SELECT photo_id, caption
FROM options_photo_captions
WHERE option_id = $1
`

type ListOptionPhotoCaptionRow struct {
	PhotoID string `json:"photo_id"`
	Caption string `json:"caption"`
}

func (q *Queries) ListOptionPhotoCaption(ctx context.Context, optionID uuid.UUID) ([]ListOptionPhotoCaptionRow, error) {
	rows, err := q.db.Query(ctx, listOptionPhotoCaption, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOptionPhotoCaptionRow{}
	for rows.Next() {
		var i ListOptionPhotoCaptionRow
		if err := rows.Scan(&i.PhotoID, &i.Caption); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOptionPhotoCaption = `-- name: RemoveOptionPhotoCaption :exec
DELETE FROM options_photo_captions
WHERE option_id = $1 AND photo_id = $2
`

type RemoveOptionPhotoCaptionParams struct {
	OptionID uuid.UUID `json:"option_id"`
	PhotoID  string    `json:"photo_id"`
}

func (q *Queries) RemoveOptionPhotoCaption(ctx context.Context, arg RemoveOptionPhotoCaptionParams) error {
	_, err := q.db.Exec(ctx, removeOptionPhotoCaption, arg.OptionID, arg.PhotoID)
	return err
}

const updateOptionPhotoCaption = `-- name: UpdateOptionPhotoCaption :one
UPDATE options_photo_captions
SET 
    caption = $1,
    updated_at = NOW()
WHERE option_id = $2 AND photo_id = $3
RETURNING photo_id, caption
`

type UpdateOptionPhotoCaptionParams struct {
	Caption  string    `json:"caption"`
	OptionID uuid.UUID `json:"option_id"`
	PhotoID  string    `json:"photo_id"`
}

type UpdateOptionPhotoCaptionRow struct {
	PhotoID string `json:"photo_id"`
	Caption string `json:"caption"`
}

func (q *Queries) UpdateOptionPhotoCaption(ctx context.Context, arg UpdateOptionPhotoCaptionParams) (UpdateOptionPhotoCaptionRow, error) {
	row := q.db.QueryRow(ctx, updateOptionPhotoCaption, arg.Caption, arg.OptionID, arg.PhotoID)
	var i UpdateOptionPhotoCaptionRow
	err := row.Scan(&i.PhotoID, &i.Caption)
	return i, err
}

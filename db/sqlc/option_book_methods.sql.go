// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: option_book_methods.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOptionBookMethod = `-- name: CreateOptionBookMethod :one
INSERT INTO option_book_methods (
    option_id,
    instant_book
) VALUES (
    $1, $2
) RETURNING option_id
`

type CreateOptionBookMethodParams struct {
	OptionID    uuid.UUID `json:"option_id"`
	InstantBook bool      `json:"instant_book"`
}

func (q *Queries) CreateOptionBookMethod(ctx context.Context, arg CreateOptionBookMethodParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createOptionBookMethod, arg.OptionID, arg.InstantBook)
	var option_id uuid.UUID
	err := row.Scan(&option_id)
	return option_id, err
}

const getOptionBookMethod = `-- name: GetOptionBookMethod :one
SELECT instant_book, identity_verified, good_track_record, pre_book_msg
FROM option_book_methods
WHERE option_id = $1
`

type GetOptionBookMethodRow struct {
	InstantBook      bool   `json:"instant_book"`
	IdentityVerified bool   `json:"identity_verified"`
	GoodTrackRecord  bool   `json:"good_track_record"`
	PreBookMsg       string `json:"pre_book_msg"`
}

func (q *Queries) GetOptionBookMethod(ctx context.Context, optionID uuid.UUID) (GetOptionBookMethodRow, error) {
	row := q.db.QueryRow(ctx, getOptionBookMethod, optionID)
	var i GetOptionBookMethodRow
	err := row.Scan(
		&i.InstantBook,
		&i.IdentityVerified,
		&i.GoodTrackRecord,
		&i.PreBookMsg,
	)
	return i, err
}

const removeOptionBookMethod = `-- name: RemoveOptionBookMethod :exec
DELETE FROM option_book_methods
WHERE option_id = $1
`

func (q *Queries) RemoveOptionBookMethod(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionBookMethod, optionID)
	return err
}

const updateOptionBookMethod = `-- name: UpdateOptionBookMethod :one
UPDATE option_book_methods 
SET
    instant_book = $1,
    identity_verified = $2,
    good_track_record = $3,
    updated_at = NOW()
WHERE option_id = $4
RETURNING instant_book, identity_verified, good_track_record, pre_book_msg
`

type UpdateOptionBookMethodParams struct {
	InstantBook      bool      `json:"instant_book"`
	IdentityVerified bool      `json:"identity_verified"`
	GoodTrackRecord  bool      `json:"good_track_record"`
	OptionID         uuid.UUID `json:"option_id"`
}

type UpdateOptionBookMethodRow struct {
	InstantBook      bool   `json:"instant_book"`
	IdentityVerified bool   `json:"identity_verified"`
	GoodTrackRecord  bool   `json:"good_track_record"`
	PreBookMsg       string `json:"pre_book_msg"`
}

func (q *Queries) UpdateOptionBookMethod(ctx context.Context, arg UpdateOptionBookMethodParams) (UpdateOptionBookMethodRow, error) {
	row := q.db.QueryRow(ctx, updateOptionBookMethod,
		arg.InstantBook,
		arg.IdentityVerified,
		arg.GoodTrackRecord,
		arg.OptionID,
	)
	var i UpdateOptionBookMethodRow
	err := row.Scan(
		&i.InstantBook,
		&i.IdentityVerified,
		&i.GoodTrackRecord,
		&i.PreBookMsg,
	)
	return i, err
}

const updateOptionBookMethodMsg = `-- name: UpdateOptionBookMethodMsg :one
UPDATE option_book_methods 
SET
    pre_book_msg = $1,
    updated_at = NOW()
WHERE option_id = $2
RETURNING pre_book_msg
`

type UpdateOptionBookMethodMsgParams struct {
	PreBookMsg string    `json:"pre_book_msg"`
	OptionID   uuid.UUID `json:"option_id"`
}

func (q *Queries) UpdateOptionBookMethodMsg(ctx context.Context, arg UpdateOptionBookMethodMsgParams) (string, error) {
	row := q.db.QueryRow(ctx, updateOptionBookMethodMsg, arg.PreBookMsg, arg.OptionID)
	var pre_book_msg string
	err := row.Scan(&pre_book_msg)
	return pre_book_msg, err
}

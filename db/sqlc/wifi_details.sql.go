// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: wifi_details.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createWifiDetail = `-- name: CreateWifiDetail :one
INSERT INTO wifi_details (
    option_id,
    network_name,
    password
) VALUES (
    $1, $2, $3
) RETURNING option_id, network_name, password, created_at, updated_at
`

type CreateWifiDetailParams struct {
	OptionID    uuid.UUID `json:"option_id"`
	NetworkName string    `json:"network_name"`
	Password    string    `json:"password"`
}

func (q *Queries) CreateWifiDetail(ctx context.Context, arg CreateWifiDetailParams) (WifiDetail, error) {
	row := q.db.QueryRow(ctx, createWifiDetail, arg.OptionID, arg.NetworkName, arg.Password)
	var i WifiDetail
	err := row.Scan(
		&i.OptionID,
		&i.NetworkName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWifiDetail = `-- name: GetWifiDetail :one
SELECT option_id, network_name, password, created_at, updated_at 
FROM wifi_details
WHERE option_id = $1
`

func (q *Queries) GetWifiDetail(ctx context.Context, optionID uuid.UUID) (WifiDetail, error) {
	row := q.db.QueryRow(ctx, getWifiDetail, optionID)
	var i WifiDetail
	err := row.Scan(
		&i.OptionID,
		&i.NetworkName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeWifiDetail = `-- name: RemoveWifiDetail :exec
DELETE FROM wifi_details 
WHERE option_id = $1
`

func (q *Queries) RemoveWifiDetail(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeWifiDetail, optionID)
	return err
}

const updateWifiDetail = `-- name: UpdateWifiDetail :one
UPDATE wifi_details
SET 
    network_name = $1,
    password = $2,
    updated_at = NOW()
WHERE option_id = $3
RETURNING option_id, network_name, password, created_at, updated_at
`

type UpdateWifiDetailParams struct {
	NetworkName string    `json:"network_name"`
	Password    string    `json:"password"`
	OptionID    uuid.UUID `json:"option_id"`
}

func (q *Queries) UpdateWifiDetail(ctx context.Context, arg UpdateWifiDetailParams) (WifiDetail, error) {
	row := q.db.QueryRow(ctx, updateWifiDetail, arg.NetworkName, arg.Password, arg.OptionID)
	var i WifiDetail
	err := row.Scan(
		&i.OptionID,
		&i.NetworkName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

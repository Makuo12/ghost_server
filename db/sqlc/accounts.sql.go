// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: accounts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
RETURNING id, id_int, user_id, currency, balance, created_at, updated_at
`

type AddAccountBalanceParams struct {
	Amount int64     `json:"amount"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addAccountBalanceTopUp = `-- name: AddAccountBalanceTopUp :one
UPDATE accounts
SET balance = balance + $1
WHERE user_id = $2 AND currency = $3
RETURNING id, id_int, user_id, currency, balance, created_at, updated_at
`

type AddAccountBalanceTopUpParams struct {
	Amount   int64     `json:"amount"`
	UserID   uuid.UUID `json:"user_id"`
	Currency string    `json:"currency"`
}

func (q *Queries) AddAccountBalanceTopUp(ctx context.Context, arg AddAccountBalanceTopUpParams) (Account, error) {
	row := q.db.QueryRow(ctx, addAccountBalanceTopUp, arg.Amount, arg.UserID, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (
    user_id,
    currency
    )
VALUES (
    $1, $2
    )
`

type CreateAccountParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Currency string    `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount, arg.UserID, arg.Currency)
	return err
}

const createTestAccount = `-- name: CreateTestAccount :one
INSERT INTO accounts (
    user_id,
    currency,
    balance
    )
VALUES (
    $1, $2, $3
    )
RETURNING id, id_int, user_id, currency, balance, created_at, updated_at
`

type CreateTestAccountParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Currency string    `json:"currency"`
	Balance  int64     `json:"balance"`
}

func (q *Queries) CreateTestAccount(ctx context.Context, arg CreateTestAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createTestAccount, arg.UserID, arg.Currency, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, id_int, user_id, currency, balance, created_at, updated_at
FROM accounts
WHERE user_id = $1 AND currency = $2
LIMIT 1
`

type GetAccountParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Currency string    `json:"currency"`
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, arg.UserID, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByMainID = `-- name: GetAccountByMainID :one
SELECT id, id_int, user_id, currency, balance, created_at, updated_at
FROM accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccountByMainID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByMainID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserID = `-- name: GetAccountByUserID :one
SELECT id, id_int, user_id, currency, balance, created_at, updated_at
FROM accounts
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetAccountByUserID(ctx context.Context, userID uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByUserID, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, id_int, user_id, currency, balance, created_at, updated_at FROM accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, id_int, user_id, currency, balance, created_at, updated_at
FROM accounts
WHERE user_id = $1
`

func (q *Queries) ListAccount(ctx context.Context, userID uuid.UUID) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccount, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.IDInt,
			&i.UserID,
			&i.Currency,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET balance = $2
WHERE id = $1
RETURNING id, id_int, user_id, currency, balance, created_at, updated_at
`

type UpdateAccountParams struct {
	ID      uuid.UUID `json:"id"`
	Balance int64     `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.IDInt,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

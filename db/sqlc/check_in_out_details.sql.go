// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: check_in_out_details.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCheckInOutDetail = `-- name: CreateCheckInOutDetail :one
INSERT INTO check_in_out_details (
    option_id,
    restricted_check_in_days,
    restricted_check_out_days
) VALUES (
    $1, $2, $3
) RETURNING option_id
`

type CreateCheckInOutDetailParams struct {
	OptionID               uuid.UUID `json:"option_id"`
	RestrictedCheckInDays  []string  `json:"restricted_check_in_days"`
	RestrictedCheckOutDays []string  `json:"restricted_check_out_days"`
}

func (q *Queries) CreateCheckInOutDetail(ctx context.Context, arg CreateCheckInOutDetailParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createCheckInOutDetail, arg.OptionID, arg.RestrictedCheckInDays, arg.RestrictedCheckOutDays)
	var option_id uuid.UUID
	err := row.Scan(&option_id)
	return option_id, err
}

const getCheckInOutDetail = `-- name: GetCheckInOutDetail :one
SELECT arrive_after, arrive_before, leave_before, restricted_check_in_days, restricted_check_out_days
FROM check_in_out_details
WHERE option_id = $1
`

type GetCheckInOutDetailRow struct {
	ArriveAfter            string   `json:"arrive_after"`
	ArriveBefore           string   `json:"arrive_before"`
	LeaveBefore            string   `json:"leave_before"`
	RestrictedCheckInDays  []string `json:"restricted_check_in_days"`
	RestrictedCheckOutDays []string `json:"restricted_check_out_days"`
}

func (q *Queries) GetCheckInOutDetail(ctx context.Context, optionID uuid.UUID) (GetCheckInOutDetailRow, error) {
	row := q.db.QueryRow(ctx, getCheckInOutDetail, optionID)
	var i GetCheckInOutDetailRow
	err := row.Scan(
		&i.ArriveAfter,
		&i.ArriveBefore,
		&i.LeaveBefore,
		&i.RestrictedCheckInDays,
		&i.RestrictedCheckOutDays,
	)
	return i, err
}

const removeCheckInOutDetail = `-- name: RemoveCheckInOutDetail :exec
DELETE FROM check_in_out_details
WHERE option_id = $1
`

func (q *Queries) RemoveCheckInOutDetail(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeCheckInOutDetail, optionID)
	return err
}

const updateCheckInOutDetail = `-- name: UpdateCheckInOutDetail :one
UPDATE check_in_out_details 
SET
    arrive_after = $1,
    arrive_before = $2,
    leave_before = $3,
    restricted_check_in_days = $4,
    restricted_check_out_days = $5,
    updated_at = NOW()
WHERE option_id = $6
RETURNING arrive_after, arrive_before, leave_before, restricted_check_in_days, restricted_check_out_days
`

type UpdateCheckInOutDetailParams struct {
	ArriveAfter            string    `json:"arrive_after"`
	ArriveBefore           string    `json:"arrive_before"`
	LeaveBefore            string    `json:"leave_before"`
	RestrictedCheckInDays  []string  `json:"restricted_check_in_days"`
	RestrictedCheckOutDays []string  `json:"restricted_check_out_days"`
	OptionID               uuid.UUID `json:"option_id"`
}

type UpdateCheckInOutDetailRow struct {
	ArriveAfter            string   `json:"arrive_after"`
	ArriveBefore           string   `json:"arrive_before"`
	LeaveBefore            string   `json:"leave_before"`
	RestrictedCheckInDays  []string `json:"restricted_check_in_days"`
	RestrictedCheckOutDays []string `json:"restricted_check_out_days"`
}

func (q *Queries) UpdateCheckInOutDetail(ctx context.Context, arg UpdateCheckInOutDetailParams) (UpdateCheckInOutDetailRow, error) {
	row := q.db.QueryRow(ctx, updateCheckInOutDetail,
		arg.ArriveAfter,
		arg.ArriveBefore,
		arg.LeaveBefore,
		arg.RestrictedCheckInDays,
		arg.RestrictedCheckOutDays,
		arg.OptionID,
	)
	var i UpdateCheckInOutDetailRow
	err := row.Scan(
		&i.ArriveAfter,
		&i.ArriveBefore,
		&i.LeaveBefore,
		&i.RestrictedCheckInDays,
		&i.RestrictedCheckOutDays,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_apn_details.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserAPNDetail = `-- name: CreateUserAPNDetail :one
INSERT INTO user_apn_details (
    user_id,
    device_name,
    model,
    identifier_for_vendor,
    token
) VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateUserAPNDetailParams struct {
	UserID              uuid.UUID `json:"user_id"`
	DeviceName          string    `json:"device_name"`
	Model               string    `json:"model"`
	IdentifierForVendor string    `json:"identifier_for_vendor"`
	Token               string    `json:"token"`
}

func (q *Queries) CreateUserAPNDetail(ctx context.Context, arg CreateUserAPNDetailParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUserAPNDetail,
		arg.UserID,
		arg.DeviceName,
		arg.Model,
		arg.IdentifierForVendor,
		arg.Token,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const listUidAPNDetail = `-- name: ListUidAPNDetail :many
SELECT id, user_id, device_name, model, identifier_for_vendor, token, created_at, updated_at
FROM user_apn_details
WHERE user_id = $1
`

func (q *Queries) ListUidAPNDetail(ctx context.Context, userID uuid.UUID) ([]UserApnDetail, error) {
	rows, err := q.db.Query(ctx, listUidAPNDetail, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserApnDetail{}
	for rows.Next() {
		var i UserApnDetail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceName,
			&i.Model,
			&i.IdentifierForVendor,
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserIdAPNDetail = `-- name: ListUserIdAPNDetail :many
SELECT ua.id, ua.user_id, device_name, model, identifier_for_vendor, token, ua.created_at, ua.updated_at, u.id, u.user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, photo, password_changed_at, u.created_at, u.updated_at
FROM user_apn_details ua
JOIN users u on u.id = ua.user_id
WHERE u.user_id = $1
`

type ListUserIdAPNDetailRow struct {
	ID                  uuid.UUID `json:"id"`
	UserID              uuid.UUID `json:"user_id"`
	DeviceName          string    `json:"device_name"`
	Model               string    `json:"model"`
	IdentifierForVendor string    `json:"identifier_for_vendor"`
	Token               string    `json:"token"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
	ID_2                uuid.UUID `json:"id_2"`
	UserID_2            uuid.UUID `json:"user_id_2"`
	FirebaseID          uuid.UUID `json:"firebase_id"`
	PublicID            uuid.UUID `json:"public_id"`
	HashedPassword      string    `json:"hashed_password"`
	DeepLinkID          uuid.UUID `json:"deep_link_id"`
	FirebasePassword    string    `json:"firebase_password"`
	Email               string    `json:"email"`
	PhoneNumber         string    `json:"phone_number"`
	FirstName           string    `json:"first_name"`
	Username            string    `json:"username"`
	LastName            string    `json:"last_name"`
	DateOfBirth         time.Time `json:"date_of_birth"`
	DialCode            string    `json:"dial_code"`
	DialCountry         string    `json:"dial_country"`
	CurrentOptionID     string    `json:"current_option_id"`
	Currency            string    `json:"currency"`
	DefaultCard         string    `json:"default_card"`
	DefaultPayoutCard   string    `json:"default_payout_card"`
	DefaultAccountID    string    `json:"default_account_id"`
	IsActive            bool      `json:"is_active"`
	Photo               string    `json:"photo"`
	PasswordChangedAt   time.Time `json:"password_changed_at"`
	CreatedAt_2         time.Time `json:"created_at_2"`
	UpdatedAt_2         time.Time `json:"updated_at_2"`
}

func (q *Queries) ListUserIdAPNDetail(ctx context.Context, userID uuid.UUID) ([]ListUserIdAPNDetailRow, error) {
	rows, err := q.db.Query(ctx, listUserIdAPNDetail, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserIdAPNDetailRow{}
	for rows.Next() {
		var i ListUserIdAPNDetailRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceName,
			&i.Model,
			&i.IdentifierForVendor,
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.UserID_2,
			&i.FirebaseID,
			&i.PublicID,
			&i.HashedPassword,
			&i.DeepLinkID,
			&i.FirebasePassword,
			&i.Email,
			&i.PhoneNumber,
			&i.FirstName,
			&i.Username,
			&i.LastName,
			&i.DateOfBirth,
			&i.DialCode,
			&i.DialCountry,
			&i.CurrentOptionID,
			&i.Currency,
			&i.DefaultCard,
			&i.DefaultPayoutCard,
			&i.DefaultAccountID,
			&i.IsActive,
			&i.Photo,
			&i.PasswordChangedAt,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllUserAPNDetail = `-- name: RemoveAllUserAPNDetail :exec
DELETE FROM user_apn_details
WHERE user_id = $1
`

func (q *Queries) RemoveAllUserAPNDetail(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllUserAPNDetail, userID)
	return err
}

const removeAllUserAPNDetailButOne = `-- name: RemoveAllUserAPNDetailButOne :exec
DELETE FROM user_apn_details
WHERE user_id = $1 AND id != $2
`

type RemoveAllUserAPNDetailButOneParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) RemoveAllUserAPNDetailButOne(ctx context.Context, arg RemoveAllUserAPNDetailButOneParams) error {
	_, err := q.db.Exec(ctx, removeAllUserAPNDetailButOne, arg.UserID, arg.ID)
	return err
}

const removeUserAPNDetail = `-- name: RemoveUserAPNDetail :exec
DELETE FROM user_apn_details
WHERE id = $1
`

func (q *Queries) RemoveUserAPNDetail(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeUserAPNDetail, id)
	return err
}

const updateUserAPNDetailToken = `-- name: UpdateUserAPNDetailToken :exec
UPDATE user_apn_details
SET 
    token = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateUserAPNDetailTokenParams struct {
	Token string    `json:"token"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserAPNDetailToken(ctx context.Context, arg UpdateUserAPNDetailTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserAPNDetailToken, arg.Token, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: notifications.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countNotification = `-- name: CountNotification :one
SELECT Count(*)
FROM notifications
WHERE user_id = $1
`

func (q *Queries) CountNotification(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countNotification, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countNotificationNoLimit = `-- name: CountNotificationNoLimit :one
SELECT Count(*)
FROM notifications n
WHERE user_id = $1 AND handled = false AND ((NOW() < created_at + INTERVAL '4 days' AND n.type = 'option_booking_payment_unsuccessful') OR NOW() < created_at + INTERVAL '1 days')
`

func (q *Queries) CountNotificationNoLimit(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countNotificationNoLimit, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (
    item_id,
    item_id_fake,
    user_id,
    type,
    header,
    message
) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateNotificationParams struct {
	ItemID     uuid.UUID `json:"item_id"`
	ItemIDFake bool      `json:"item_id_fake"`
	UserID     uuid.UUID `json:"user_id"`
	Type       string    `json:"type"`
	Header     string    `json:"header"`
	Message    string    `json:"message"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.Exec(ctx, createNotification,
		arg.ItemID,
		arg.ItemIDFake,
		arg.UserID,
		arg.Type,
		arg.Header,
		arg.Message,
	)
	return err
}

const getNotificationUserRequest = `-- name: GetNotificationUserRequest :one
SELECT co.id AS charge_id, n.created_at
FROM notifications n
    JOIN messages m on m.id = n.item_id
    JOIN charge_option_references co on co.reference = m.reference
WHERE n.id = $1 AND n.user_id = $2
`

type GetNotificationUserRequestParams struct {
	NotificationID uuid.UUID `json:"notification_id"`
	UserID         uuid.UUID `json:"user_id"`
}

type GetNotificationUserRequestRow struct {
	ChargeID  uuid.UUID `json:"charge_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetNotificationUserRequest(ctx context.Context, arg GetNotificationUserRequestParams) (GetNotificationUserRequestRow, error) {
	row := q.db.QueryRow(ctx, getNotificationUserRequest, arg.NotificationID, arg.UserID)
	var i GetNotificationUserRequestRow
	err := row.Scan(&i.ChargeID, &i.CreatedAt)
	return i, err
}

const listNotification = `-- name: ListNotification :many
SELECT id, header, item_id, item_id_fake, user_id, type, message, handled, created_at, updated_at
FROM notifications
WHERE user_id = $1 AND handled = false
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListNotificationParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListNotification(ctx context.Context, arg ListNotificationParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listNotification, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Header,
			&i.ItemID,
			&i.ItemIDFake,
			&i.UserID,
			&i.Type,
			&i.Message,
			&i.Handled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotificationByTime = `-- name: ListNotificationByTime :many
SELECT id, header, item_id, item_id_fake, user_id, type, message, handled, created_at, updated_at
FROM notifications
WHERE user_id = $1 AND created_at > $2 AND handled = false
ORDER BY created_at DESC
`

type ListNotificationByTimeParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListNotificationByTime(ctx context.Context, arg ListNotificationByTimeParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listNotificationByTime, arg.UserID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Header,
			&i.ItemID,
			&i.ItemIDFake,
			&i.UserID,
			&i.Type,
			&i.Message,
			&i.Handled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotificationHandled = `-- name: UpdateNotificationHandled :exec
UPDATE notifications
SET 
    handled = $1
WHERE user_id = $2  AND item_id = $3 AND handled = false
`

type UpdateNotificationHandledParams struct {
	Handled bool      `json:"handled"`
	UserID  uuid.UUID `json:"user_id"`
	ItemID  uuid.UUID `json:"item_id"`
}

func (q *Queries) UpdateNotificationHandled(ctx context.Context, arg UpdateNotificationHandledParams) error {
	_, err := q.db.Exec(ctx, updateNotificationHandled, arg.Handled, arg.UserID, arg.ItemID)
	return err
}

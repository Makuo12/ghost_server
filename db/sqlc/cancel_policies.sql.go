// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: cancel_policies.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCancelPolicy = `-- name: CreateCancelPolicy :one
INSERT INTO cancel_policies (
    option_id
) VALUES (
    $1
) RETURNING option_id
`

func (q *Queries) CreateCancelPolicy(ctx context.Context, optionID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createCancelPolicy, optionID)
	var option_id uuid.UUID
	err := row.Scan(&option_id)
	return option_id, err
}

const getCancelPolicy = `-- name: GetCancelPolicy :one
SELECT type_one, type_two, request_a_refund
FROM cancel_policies
WHERE option_id = $1
`

type GetCancelPolicyRow struct {
	TypeOne        string `json:"type_one"`
	TypeTwo        string `json:"type_two"`
	RequestARefund bool   `json:"request_a_refund"`
}

func (q *Queries) GetCancelPolicy(ctx context.Context, optionID uuid.UUID) (GetCancelPolicyRow, error) {
	row := q.db.QueryRow(ctx, getCancelPolicy, optionID)
	var i GetCancelPolicyRow
	err := row.Scan(&i.TypeOne, &i.TypeTwo, &i.RequestARefund)
	return i, err
}

const removeCancelPolicy = `-- name: RemoveCancelPolicy :exec
DELETE FROM cancel_policies
WHERE option_id = $1
`

func (q *Queries) RemoveCancelPolicy(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeCancelPolicy, optionID)
	return err
}

const updateCancelPolicy = `-- name: UpdateCancelPolicy :one
UPDATE cancel_policies 
SET
    type_one = $1,
    type_two = $2,
    request_a_refund = $3,
    updated_at = NOW()
WHERE option_id = $4
RETURNING type_one, type_two, request_a_refund
`

type UpdateCancelPolicyParams struct {
	TypeOne        string    `json:"type_one"`
	TypeTwo        string    `json:"type_two"`
	RequestARefund bool      `json:"request_a_refund"`
	OptionID       uuid.UUID `json:"option_id"`
}

type UpdateCancelPolicyRow struct {
	TypeOne        string `json:"type_one"`
	TypeTwo        string `json:"type_two"`
	RequestARefund bool   `json:"request_a_refund"`
}

func (q *Queries) UpdateCancelPolicy(ctx context.Context, arg UpdateCancelPolicyParams) (UpdateCancelPolicyRow, error) {
	row := q.db.QueryRow(ctx, updateCancelPolicy,
		arg.TypeOne,
		arg.TypeTwo,
		arg.RequestARefund,
		arg.OptionID,
	)
	var i UpdateCancelPolicyRow
	err := row.Scan(&i.TypeOne, &i.TypeTwo, &i.RequestARefund)
	return i, err
}

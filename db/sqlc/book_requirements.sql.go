// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: book_requirements.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBookRequirement = `-- name: CreateBookRequirement :one
INSERT INTO book_requirements (
    option_id
) VALUES (
    $1
) RETURNING option_id
`

func (q *Queries) CreateBookRequirement(ctx context.Context, optionID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createBookRequirement, optionID)
	var option_id uuid.UUID
	err := row.Scan(&option_id)
	return option_id, err
}

const getBookRequirement = `-- name: GetBookRequirement :one
SELECT email, phone_number, rules, payment_info, profile_photo
FROM book_requirements
WHERE option_id = $1
`

type GetBookRequirementRow struct {
	Email        bool `json:"email"`
	PhoneNumber  bool `json:"phone_number"`
	Rules        bool `json:"rules"`
	PaymentInfo  bool `json:"payment_info"`
	ProfilePhoto bool `json:"profile_photo"`
}

func (q *Queries) GetBookRequirement(ctx context.Context, optionID uuid.UUID) (GetBookRequirementRow, error) {
	row := q.db.QueryRow(ctx, getBookRequirement, optionID)
	var i GetBookRequirementRow
	err := row.Scan(
		&i.Email,
		&i.PhoneNumber,
		&i.Rules,
		&i.PaymentInfo,
		&i.ProfilePhoto,
	)
	return i, err
}

const removeBookRequirement = `-- name: RemoveBookRequirement :exec
DELETE FROM book_requirements
WHERE option_id = $1
`

func (q *Queries) RemoveBookRequirement(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeBookRequirement, optionID)
	return err
}

const updateBookRequirement = `-- name: UpdateBookRequirement :one
UPDATE book_requirements 
SET
    email = COALESCE($1, email),
    phone_number = COALESCE($2, phone_number),
    rules = COALESCE($3, rules),
    payment_info = COALESCE($4, payment_info),
    profile_photo = COALESCE($5, profile_photo),
    updated_at = NOW()
WHERE option_id = $6 
RETURNING email, phone_number, rules, payment_info, profile_photo
`

type UpdateBookRequirementParams struct {
	Email        pgtype.Bool `json:"email"`
	PhoneNumber  pgtype.Bool `json:"phone_number"`
	Rules        pgtype.Bool `json:"rules"`
	PaymentInfo  pgtype.Bool `json:"payment_info"`
	ProfilePhoto pgtype.Bool `json:"profile_photo"`
	OptionID     uuid.UUID   `json:"option_id"`
}

type UpdateBookRequirementRow struct {
	Email        bool `json:"email"`
	PhoneNumber  bool `json:"phone_number"`
	Rules        bool `json:"rules"`
	PaymentInfo  bool `json:"payment_info"`
	ProfilePhoto bool `json:"profile_photo"`
}

func (q *Queries) UpdateBookRequirement(ctx context.Context, arg UpdateBookRequirementParams) (UpdateBookRequirementRow, error) {
	row := q.db.QueryRow(ctx, updateBookRequirement,
		arg.Email,
		arg.PhoneNumber,
		arg.Rules,
		arg.PaymentInfo,
		arg.ProfilePhoto,
		arg.OptionID,
	)
	var i UpdateBookRequirementRow
	err := row.Scan(
		&i.Email,
		&i.PhoneNumber,
		&i.Rules,
		&i.PaymentInfo,
		&i.ProfilePhoto,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: option_availability_settings.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOptionAvailabilitySetting = `-- name: CreateOptionAvailabilitySetting :one
INSERT INTO option_availability_settings (
    option_id
) VALUES (
    $1
) RETURNING option_id
`

func (q *Queries) CreateOptionAvailabilitySetting(ctx context.Context, optionID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createOptionAvailabilitySetting, optionID)
	var option_id uuid.UUID
	err := row.Scan(&option_id)
	return option_id, err
}

const getOptionAvailabilitySetting = `-- name: GetOptionAvailabilitySetting :one
SELECT advance_notice, advance_notice_condition, preparation_time, availability_window, auto_block_dates
FROM option_availability_settings
WHERE option_id = $1
`

type GetOptionAvailabilitySettingRow struct {
	AdvanceNotice          string `json:"advance_notice"`
	AdvanceNoticeCondition string `json:"advance_notice_condition"`
	PreparationTime        string `json:"preparation_time"`
	AvailabilityWindow     string `json:"availability_window"`
	AutoBlockDates         bool   `json:"auto_block_dates"`
}

func (q *Queries) GetOptionAvailabilitySetting(ctx context.Context, optionID uuid.UUID) (GetOptionAvailabilitySettingRow, error) {
	row := q.db.QueryRow(ctx, getOptionAvailabilitySetting, optionID)
	var i GetOptionAvailabilitySettingRow
	err := row.Scan(
		&i.AdvanceNotice,
		&i.AdvanceNoticeCondition,
		&i.PreparationTime,
		&i.AvailabilityWindow,
		&i.AutoBlockDates,
	)
	return i, err
}

const removeOptionAvailabilitySetting = `-- name: RemoveOptionAvailabilitySetting :exec
DELETE FROM option_availability_settings
WHERE option_id = $1
`

func (q *Queries) RemoveOptionAvailabilitySetting(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionAvailabilitySetting, optionID)
	return err
}

const updateOptionAvailabilitySetting = `-- name: UpdateOptionAvailabilitySetting :one
UPDATE option_availability_settings 
SET
    advance_notice = $1,
    advance_notice_condition = $2,
    preparation_time = $3,
    availability_window = $4,
    updated_at = NOW()
WHERE option_id = $5
RETURNING advance_notice, advance_notice_condition, preparation_time, availability_window, auto_block_dates
`

type UpdateOptionAvailabilitySettingParams struct {
	AdvanceNotice          string    `json:"advance_notice"`
	AdvanceNoticeCondition string    `json:"advance_notice_condition"`
	PreparationTime        string    `json:"preparation_time"`
	AvailabilityWindow     string    `json:"availability_window"`
	OptionID               uuid.UUID `json:"option_id"`
}

type UpdateOptionAvailabilitySettingRow struct {
	AdvanceNotice          string `json:"advance_notice"`
	AdvanceNoticeCondition string `json:"advance_notice_condition"`
	PreparationTime        string `json:"preparation_time"`
	AvailabilityWindow     string `json:"availability_window"`
	AutoBlockDates         bool   `json:"auto_block_dates"`
}

func (q *Queries) UpdateOptionAvailabilitySetting(ctx context.Context, arg UpdateOptionAvailabilitySettingParams) (UpdateOptionAvailabilitySettingRow, error) {
	row := q.db.QueryRow(ctx, updateOptionAvailabilitySetting,
		arg.AdvanceNotice,
		arg.AdvanceNoticeCondition,
		arg.PreparationTime,
		arg.AvailabilityWindow,
		arg.OptionID,
	)
	var i UpdateOptionAvailabilitySettingRow
	err := row.Scan(
		&i.AdvanceNotice,
		&i.AdvanceNoticeCondition,
		&i.PreparationTime,
		&i.AvailabilityWindow,
		&i.AutoBlockDates,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: charge_event_references.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChargeEventReference = `-- name: CreateChargeEventReference :one
INSERT INTO charge_event_references (
    user_id,
    option_user_id,
    total_fee,
    service_fee,
    total_absorb_fee,
    currency,
    date_booked,
    reference,
    payment_reference,
    is_complete
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, user_id, option_user_id, total_fee, service_fee, total_absorb_fee, currency, date_booked, can_instant_book, require_request, request_type, reference, payment_reference, request_approved, is_complete, created_at, updated_at
`

type CreateChargeEventReferenceParams struct {
	UserID           uuid.UUID `json:"user_id"`
	OptionUserID     uuid.UUID `json:"option_user_id"`
	TotalFee         int64     `json:"total_fee"`
	ServiceFee       int64     `json:"service_fee"`
	TotalAbsorbFee   int64     `json:"total_absorb_fee"`
	Currency         string    `json:"currency"`
	DateBooked       time.Time `json:"date_booked"`
	Reference        string    `json:"reference"`
	PaymentReference string    `json:"payment_reference"`
	IsComplete       bool      `json:"is_complete"`
}

func (q *Queries) CreateChargeEventReference(ctx context.Context, arg CreateChargeEventReferenceParams) (ChargeEventReference, error) {
	row := q.db.QueryRow(ctx, createChargeEventReference,
		arg.UserID,
		arg.OptionUserID,
		arg.TotalFee,
		arg.ServiceFee,
		arg.TotalAbsorbFee,
		arg.Currency,
		arg.DateBooked,
		arg.Reference,
		arg.PaymentReference,
		arg.IsComplete,
	)
	var i ChargeEventReference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OptionUserID,
		&i.TotalFee,
		&i.ServiceFee,
		&i.TotalAbsorbFee,
		&i.Currency,
		&i.DateBooked,
		&i.CanInstantBook,
		&i.RequireRequest,
		&i.RequestType,
		&i.Reference,
		&i.PaymentReference,
		&i.RequestApproved,
		&i.IsComplete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChargeEventReferenceComplete = `-- name: UpdateChargeEventReferenceComplete :one
UPDATE charge_event_references
SET 
    is_complete = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, user_id, option_user_id, total_fee, service_fee, total_absorb_fee, currency, date_booked, can_instant_book, require_request, request_type, reference, payment_reference, request_approved, is_complete, created_at, updated_at
`

type UpdateChargeEventReferenceCompleteParams struct {
	IsComplete bool      `json:"is_complete"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdateChargeEventReferenceComplete(ctx context.Context, arg UpdateChargeEventReferenceCompleteParams) (ChargeEventReference, error) {
	row := q.db.QueryRow(ctx, updateChargeEventReferenceComplete, arg.IsComplete, arg.ID)
	var i ChargeEventReference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OptionUserID,
		&i.TotalFee,
		&i.ServiceFee,
		&i.TotalAbsorbFee,
		&i.Currency,
		&i.DateBooked,
		&i.CanInstantBook,
		&i.RequireRequest,
		&i.RequestType,
		&i.Reference,
		&i.PaymentReference,
		&i.RequestApproved,
		&i.IsComplete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChargeEventReferenceCompleteByReference = `-- name: UpdateChargeEventReferenceCompleteByReference :one
UPDATE charge_event_references
SET 
    is_complete = $1,
    updated_at = NOW()
WHERE reference = $2
RETURNING id, user_id, option_user_id, total_fee, service_fee, total_absorb_fee, currency, date_booked, can_instant_book, require_request, request_type, reference, payment_reference, request_approved, is_complete, created_at, updated_at
`

type UpdateChargeEventReferenceCompleteByReferenceParams struct {
	IsComplete bool   `json:"is_complete"`
	Reference  string `json:"reference"`
}

func (q *Queries) UpdateChargeEventReferenceCompleteByReference(ctx context.Context, arg UpdateChargeEventReferenceCompleteByReferenceParams) (ChargeEventReference, error) {
	row := q.db.QueryRow(ctx, updateChargeEventReferenceCompleteByReference, arg.IsComplete, arg.Reference)
	var i ChargeEventReference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OptionUserID,
		&i.TotalFee,
		&i.ServiceFee,
		&i.TotalAbsorbFee,
		&i.Currency,
		&i.DateBooked,
		&i.CanInstantBook,
		&i.RequireRequest,
		&i.RequestType,
		&i.Reference,
		&i.PaymentReference,
		&i.RequestApproved,
		&i.IsComplete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: options_info_photos.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOptionInfoPhoto = `-- name: CreateOptionInfoPhoto :one
INSERT INTO options_info_photos (
    option_id,
    main_image,
    images
)
VALUES ($1, $2, $3)
RETURNING option_id, has_meta_data, main_image, images, created_at, updated_at
`

type CreateOptionInfoPhotoParams struct {
	OptionID  uuid.UUID `json:"option_id"`
	MainImage string    `json:"main_image"`
	Images    []string  `json:"images"`
}

func (q *Queries) CreateOptionInfoPhoto(ctx context.Context, arg CreateOptionInfoPhotoParams) (OptionsInfoPhoto, error) {
	row := q.db.QueryRow(ctx, createOptionInfoPhoto, arg.OptionID, arg.MainImage, arg.Images)
	var i OptionsInfoPhoto
	err := row.Scan(
		&i.OptionID,
		&i.HasMetaData,
		&i.MainImage,
		&i.Images,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionInfoPhoto = `-- name: GetOptionInfoPhoto :one
SELECT option_id, has_meta_data, main_image, images, created_at, updated_at 
FROM options_info_photos
WHERE option_id = $1
`

func (q *Queries) GetOptionInfoPhoto(ctx context.Context, optionID uuid.UUID) (OptionsInfoPhoto, error) {
	row := q.db.QueryRow(ctx, getOptionInfoPhoto, optionID)
	var i OptionsInfoPhoto
	err := row.Scan(
		&i.OptionID,
		&i.HasMetaData,
		&i.MainImage,
		&i.Images,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllPhoto = `-- name: ListAllPhoto :many
SELECT option_id, has_meta_data, main_image, images, created_at, updated_at
FROM options_info_photos
`

func (q *Queries) ListAllPhoto(ctx context.Context) ([]OptionsInfoPhoto, error) {
	rows, err := q.db.Query(ctx, listAllPhoto)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OptionsInfoPhoto{}
	for rows.Next() {
		var i OptionsInfoPhoto
		if err := rows.Scan(
			&i.OptionID,
			&i.HasMetaData,
			&i.MainImage,
			&i.Images,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllUserPhoto = `-- name: ListAllUserPhoto :many
SELECT id, co_host_id, option_user_id, host_id, deep_link_id, primary_user_id, is_active, is_complete, is_verified, category, category_two, category_three, category_four, is_top_seller, time_zone, currency, option_img, option_type, main_option_type, oi.created_at, completed, oi.updated_at, option_id, has_meta_data, main_image, images, oip.created_at, oip.updated_at
FROM options_infos oi
JOIN options_info_photos oip on oip.option_id = oi.id
WHERE oi.host_id = $1
`

type ListAllUserPhotoRow struct {
	ID             uuid.UUID `json:"id"`
	CoHostID       uuid.UUID `json:"co_host_id"`
	OptionUserID   uuid.UUID `json:"option_user_id"`
	HostID         uuid.UUID `json:"host_id"`
	DeepLinkID     uuid.UUID `json:"deep_link_id"`
	PrimaryUserID  uuid.UUID `json:"primary_user_id"`
	IsActive       bool      `json:"is_active"`
	IsComplete     bool      `json:"is_complete"`
	IsVerified     bool      `json:"is_verified"`
	Category       string    `json:"category"`
	CategoryTwo    string    `json:"category_two"`
	CategoryThree  string    `json:"category_three"`
	CategoryFour   string    `json:"category_four"`
	IsTopSeller    bool      `json:"is_top_seller"`
	TimeZone       string    `json:"time_zone"`
	Currency       string    `json:"currency"`
	OptionImg      string    `json:"option_img"`
	OptionType     string    `json:"option_type"`
	MainOptionType string    `json:"main_option_type"`
	CreatedAt      time.Time `json:"created_at"`
	Completed      time.Time `json:"completed"`
	UpdatedAt      time.Time `json:"updated_at"`
	OptionID       uuid.UUID `json:"option_id"`
	HasMetaData    bool      `json:"has_meta_data"`
	MainImage      string    `json:"main_image"`
	Images         []string  `json:"images"`
	CreatedAt_2    time.Time `json:"created_at_2"`
	UpdatedAt_2    time.Time `json:"updated_at_2"`
}

func (q *Queries) ListAllUserPhoto(ctx context.Context, hostID uuid.UUID) ([]ListAllUserPhotoRow, error) {
	rows, err := q.db.Query(ctx, listAllUserPhoto, hostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllUserPhotoRow{}
	for rows.Next() {
		var i ListAllUserPhotoRow
		if err := rows.Scan(
			&i.ID,
			&i.CoHostID,
			&i.OptionUserID,
			&i.HostID,
			&i.DeepLinkID,
			&i.PrimaryUserID,
			&i.IsActive,
			&i.IsComplete,
			&i.IsVerified,
			&i.Category,
			&i.CategoryTwo,
			&i.CategoryThree,
			&i.CategoryFour,
			&i.IsTopSeller,
			&i.TimeZone,
			&i.Currency,
			&i.OptionImg,
			&i.OptionType,
			&i.MainOptionType,
			&i.CreatedAt,
			&i.Completed,
			&i.UpdatedAt,
			&i.OptionID,
			&i.HasMetaData,
			&i.MainImage,
			&i.Images,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOptionPhotoByAdmin = `-- name: ListOptionPhotoByAdmin :many
SELECT option_id, has_meta_data, main_image, images, created_at, updated_at
FROM options_info_photos
`

func (q *Queries) ListOptionPhotoByAdmin(ctx context.Context) ([]OptionsInfoPhoto, error) {
	rows, err := q.db.Query(ctx, listOptionPhotoByAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OptionsInfoPhoto{}
	for rows.Next() {
		var i OptionsInfoPhoto
		if err := rows.Scan(
			&i.OptionID,
			&i.HasMetaData,
			&i.MainImage,
			&i.Images,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOptionInfoPhoto = `-- name: RemoveOptionInfoPhoto :exec
DELETE FROM options_info_photos
WHERE option_id = $1
`

func (q *Queries) RemoveOptionInfoPhoto(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionInfoPhoto, optionID)
	return err
}

const updateOptionInfoImages = `-- name: UpdateOptionInfoImages :one
UPDATE options_info_photos
SET
    images = $1,
    updated_at = NOW()
WHERE option_id = $2
RETURNING main_image, images
`

type UpdateOptionInfoImagesParams struct {
	Images   []string  `json:"images"`
	OptionID uuid.UUID `json:"option_id"`
}

type UpdateOptionInfoImagesRow struct {
	MainImage string   `json:"main_image"`
	Images    []string `json:"images"`
}

func (q *Queries) UpdateOptionInfoImages(ctx context.Context, arg UpdateOptionInfoImagesParams) (UpdateOptionInfoImagesRow, error) {
	row := q.db.QueryRow(ctx, updateOptionInfoImages, arg.Images, arg.OptionID)
	var i UpdateOptionInfoImagesRow
	err := row.Scan(&i.MainImage, &i.Images)
	return i, err
}

const updateOptionInfoMainImage = `-- name: UpdateOptionInfoMainImage :one
UPDATE options_info_photos
SET 
    main_image = $1,
    updated_at = NOW()
WHERE option_id = $2 
RETURNING main_image, images
`

type UpdateOptionInfoMainImageParams struct {
	MainImage string    `json:"main_image"`
	OptionID  uuid.UUID `json:"option_id"`
}

type UpdateOptionInfoMainImageRow struct {
	MainImage string   `json:"main_image"`
	Images    []string `json:"images"`
}

func (q *Queries) UpdateOptionInfoMainImage(ctx context.Context, arg UpdateOptionInfoMainImageParams) (UpdateOptionInfoMainImageRow, error) {
	row := q.db.QueryRow(ctx, updateOptionInfoMainImage, arg.MainImage, arg.OptionID)
	var i UpdateOptionInfoMainImageRow
	err := row.Scan(&i.MainImage, &i.Images)
	return i, err
}

const updateOptionInfoPhoto = `-- name: UpdateOptionInfoPhoto :one
UPDATE options_info_photos
SET 
    main_image = $1,
    images = $2,
    updated_at = NOW()
WHERE option_id = $3
RETURNING main_image, images
`

type UpdateOptionInfoPhotoParams struct {
	MainImage string    `json:"main_image"`
	Images    []string  `json:"images"`
	OptionID  uuid.UUID `json:"option_id"`
}

type UpdateOptionInfoPhotoRow struct {
	MainImage string   `json:"main_image"`
	Images    []string `json:"images"`
}

func (q *Queries) UpdateOptionInfoPhoto(ctx context.Context, arg UpdateOptionInfoPhotoParams) (UpdateOptionInfoPhotoRow, error) {
	row := q.db.QueryRow(ctx, updateOptionInfoPhoto, arg.MainImage, arg.Images, arg.OptionID)
	var i UpdateOptionInfoPhotoRow
	err := row.Scan(&i.MainImage, &i.Images)
	return i, err
}

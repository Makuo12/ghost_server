// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: option_add_charges.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOptionAddCharge = `-- name: CreateOptionAddCharge :one
INSERT INTO option_add_charges (
    option_id,
    type,
    main_fee,
    extra_fee,
    num_of_guest
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, type, main_fee, extra_fee, num_of_guest
`

type CreateOptionAddChargeParams struct {
	OptionID   uuid.UUID `json:"option_id"`
	Type       string    `json:"type"`
	MainFee    int64     `json:"main_fee"`
	ExtraFee   int64     `json:"extra_fee"`
	NumOfGuest int32     `json:"num_of_guest"`
}

type CreateOptionAddChargeRow struct {
	ID         uuid.UUID `json:"id"`
	Type       string    `json:"type"`
	MainFee    int64     `json:"main_fee"`
	ExtraFee   int64     `json:"extra_fee"`
	NumOfGuest int32     `json:"num_of_guest"`
}

func (q *Queries) CreateOptionAddCharge(ctx context.Context, arg CreateOptionAddChargeParams) (CreateOptionAddChargeRow, error) {
	row := q.db.QueryRow(ctx, createOptionAddCharge,
		arg.OptionID,
		arg.Type,
		arg.MainFee,
		arg.ExtraFee,
		arg.NumOfGuest,
	)
	var i CreateOptionAddChargeRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.MainFee,
		&i.ExtraFee,
		&i.NumOfGuest,
	)
	return i, err
}

const getOptionAddCharge = `-- name: GetOptionAddCharge :one
SELECT id, type, main_fee, extra_fee, num_of_guest
FROM option_add_charges
WHERE option_id = $1 AND type=$2
`

type GetOptionAddChargeParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
}

type GetOptionAddChargeRow struct {
	ID         uuid.UUID `json:"id"`
	Type       string    `json:"type"`
	MainFee    int64     `json:"main_fee"`
	ExtraFee   int64     `json:"extra_fee"`
	NumOfGuest int32     `json:"num_of_guest"`
}

func (q *Queries) GetOptionAddCharge(ctx context.Context, arg GetOptionAddChargeParams) (GetOptionAddChargeRow, error) {
	row := q.db.QueryRow(ctx, getOptionAddCharge, arg.OptionID, arg.Type)
	var i GetOptionAddChargeRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.MainFee,
		&i.ExtraFee,
		&i.NumOfGuest,
	)
	return i, err
}

const listOptionAddCharge = `-- name: ListOptionAddCharge :many
SELECT id, type, main_fee, extra_fee, num_of_guest
FROM option_add_charges
WHERE option_id = $1
`

type ListOptionAddChargeRow struct {
	ID         uuid.UUID `json:"id"`
	Type       string    `json:"type"`
	MainFee    int64     `json:"main_fee"`
	ExtraFee   int64     `json:"extra_fee"`
	NumOfGuest int32     `json:"num_of_guest"`
}

func (q *Queries) ListOptionAddCharge(ctx context.Context, optionID uuid.UUID) ([]ListOptionAddChargeRow, error) {
	rows, err := q.db.Query(ctx, listOptionAddCharge, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOptionAddChargeRow{}
	for rows.Next() {
		var i ListOptionAddChargeRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.MainFee,
			&i.ExtraFee,
			&i.NumOfGuest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOptionAddCharge = `-- name: RemoveOptionAddCharge :exec
DELETE FROM option_add_charges
WHERE id = $1
`

func (q *Queries) RemoveOptionAddCharge(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionAddCharge, id)
	return err
}

const removeOptionAddChargeByType = `-- name: RemoveOptionAddChargeByType :exec
DELETE FROM option_add_charges
WHERE option_id = $1 AND type = $2
`

type RemoveOptionAddChargeByTypeParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
}

func (q *Queries) RemoveOptionAddChargeByType(ctx context.Context, arg RemoveOptionAddChargeByTypeParams) error {
	_, err := q.db.Exec(ctx, removeOptionAddChargeByType, arg.OptionID, arg.Type)
	return err
}

const removeOptionRemoveChargeByOptionID = `-- name: RemoveOptionRemoveChargeByOptionID :exec
DELETE FROM option_add_charges
WHERE option_id = $1
`

func (q *Queries) RemoveOptionRemoveChargeByOptionID(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionRemoveChargeByOptionID, optionID)
	return err
}

const updateOptionAddCharge = `-- name: UpdateOptionAddCharge :one
UPDATE option_add_charges 
SET
    main_fee = COALESCE($1, main_fee),
    extra_fee = COALESCE($2, extra_fee),
    num_of_guest = COALESCE($3, num_of_guest),
    updated_at = NOW()
WHERE id = $4 AND option_id = $5
RETURNING id, type, main_fee, extra_fee, num_of_guest
`

type UpdateOptionAddChargeParams struct {
	MainFee    pgtype.Int8 `json:"main_fee"`
	ExtraFee   pgtype.Int8 `json:"extra_fee"`
	NumOfGuest pgtype.Int4 `json:"num_of_guest"`
	ID         uuid.UUID   `json:"id"`
	OptionID   uuid.UUID   `json:"option_id"`
}

type UpdateOptionAddChargeRow struct {
	ID         uuid.UUID `json:"id"`
	Type       string    `json:"type"`
	MainFee    int64     `json:"main_fee"`
	ExtraFee   int64     `json:"extra_fee"`
	NumOfGuest int32     `json:"num_of_guest"`
}

func (q *Queries) UpdateOptionAddCharge(ctx context.Context, arg UpdateOptionAddChargeParams) (UpdateOptionAddChargeRow, error) {
	row := q.db.QueryRow(ctx, updateOptionAddCharge,
		arg.MainFee,
		arg.ExtraFee,
		arg.NumOfGuest,
		arg.ID,
		arg.OptionID,
	)
	var i UpdateOptionAddChargeRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.MainFee,
		&i.ExtraFee,
		&i.NumOfGuest,
	)
	return i, err
}

const updateOptionAddChargeByType = `-- name: UpdateOptionAddChargeByType :one
UPDATE option_add_charges 
SET
    main_fee = $1,
    extra_fee = $2,
    num_of_guest = $3,
    updated_at = NOW()
WHERE type = $4 AND option_id = $5
RETURNING id, type, main_fee, extra_fee, num_of_guest
`

type UpdateOptionAddChargeByTypeParams struct {
	MainFee    int64     `json:"main_fee"`
	ExtraFee   int64     `json:"extra_fee"`
	NumOfGuest int32     `json:"num_of_guest"`
	Type       string    `json:"type"`
	OptionID   uuid.UUID `json:"option_id"`
}

type UpdateOptionAddChargeByTypeRow struct {
	ID         uuid.UUID `json:"id"`
	Type       string    `json:"type"`
	MainFee    int64     `json:"main_fee"`
	ExtraFee   int64     `json:"extra_fee"`
	NumOfGuest int32     `json:"num_of_guest"`
}

func (q *Queries) UpdateOptionAddChargeByType(ctx context.Context, arg UpdateOptionAddChargeByTypeParams) (UpdateOptionAddChargeByTypeRow, error) {
	row := q.db.QueryRow(ctx, updateOptionAddChargeByType,
		arg.MainFee,
		arg.ExtraFee,
		arg.NumOfGuest,
		arg.Type,
		arg.OptionID,
	)
	var i UpdateOptionAddChargeByTypeRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.MainFee,
		&i.ExtraFee,
		&i.NumOfGuest,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
      hashed_password,
      firebase_password,
      email,
      username,
      date_of_birth,
      currency,
      first_name,
      last_name
   )
VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6,
      $7,
      $8
   )
RETURNING id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
`

type CreateUserParams struct {
	HashedPassword   string    `json:"hashed_password"`
	FirebasePassword string    `json:"firebase_password"`
	Email            string    `json:"email"`
	Username         string    `json:"username"`
	DateOfBirth      time.Time `json:"date_of_birth"`
	Currency         string    `json:"currency"`
	FirstName        string    `json:"first_name"`
	LastName         string    `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.HashedPassword,
		arg.FirebasePassword,
		arg.Email,
		arg.Username,
		arg.DateOfBirth,
		arg.Currency,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPD = `-- name: GetUserByPD :one
SELECT id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
FROM users
WHERE public_id = $1
`

func (q *Queries) GetUserByPD(ctx context.Context, publicID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPD, publicID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
FROM users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUserByUserID(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUserID, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDWithUsername = `-- name: GetUserIDWithUsername :one
SELECT id,
   is_active
FROM users
WHERE username = $1
LIMIT 1
`

type GetUserIDWithUsernameRow struct {
	ID       uuid.UUID `json:"id"`
	IsActive bool      `json:"is_active"`
}

func (q *Queries) GetUserIDWithUsername(ctx context.Context, username string) (GetUserIDWithUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserIDWithUsername, username)
	var i GetUserIDWithUsernameRow
	err := row.Scan(&i.ID, &i.IsActive)
	return i, err
}

const getUserVerify = `-- name: GetUserVerify :one
SELECT u.email, u.phone_number, u.first_name, u.last_name, u.default_account_id, u.date_of_birth, u.photo, u_p.languages, u_p.bio, i_d.is_verified, i_d.status
FROM users u
   JOIN users_profiles u_p on u_p.user_id = u.id
   JOIN identity i_d on i_d.user_id = u.id
WHERE id = $1
`

type GetUserVerifyRow struct {
	Email            string    `json:"email"`
	PhoneNumber      string    `json:"phone_number"`
	FirstName        string    `json:"first_name"`
	LastName         string    `json:"last_name"`
	DefaultAccountID string    `json:"default_account_id"`
	DateOfBirth      time.Time `json:"date_of_birth"`
	Photo            string    `json:"photo"`
	Languages        []string  `json:"languages"`
	Bio              string    `json:"bio"`
	IsVerified       bool      `json:"is_verified"`
	Status           string    `json:"status"`
}

func (q *Queries) GetUserVerify(ctx context.Context, id uuid.UUID) (GetUserVerifyRow, error) {
	row := q.db.QueryRow(ctx, getUserVerify, id)
	var i GetUserVerifyRow
	err := row.Scan(
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.DefaultAccountID,
		&i.DateOfBirth,
		&i.Photo,
		&i.Languages,
		&i.Bio,
		&i.IsVerified,
		&i.Status,
	)
	return i, err
}

const getUserWithEmail = `-- name: GetUserWithEmail :one
SELECT id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithPhoneNum = `-- name: GetUserWithPhoneNum :one
SELECT id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
FROM users
WHERE phone_number = $1
LIMIT 1
`

func (q *Queries) GetUserWithPhoneNum(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithPhoneNum, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithUsername = `-- name: GetUserWithUsername :one
SELECT id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserWithUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllUserPhotos = `-- name: ListAllUserPhotos :many
SELECT u.photo, id.id_photo, id.facial_photo
FROM users u
JOIN identity id on u.id = id.user_id
`

type ListAllUserPhotosRow struct {
	Photo       string `json:"photo"`
	IDPhoto     string `json:"id_photo"`
	FacialPhoto string `json:"facial_photo"`
}

func (q *Queries) ListAllUserPhotos(ctx context.Context) ([]ListAllUserPhotosRow, error) {
	rows, err := q.db.Query(ctx, listAllUserPhotos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllUserPhotosRow{}
	for rows.Next() {
		var i ListAllUserPhotosRow
		if err := rows.Scan(&i.Photo, &i.IDPhoto, &i.FacialPhoto); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
FROM users
WHERE is_active = 1
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirebaseID,
			&i.PublicID,
			&i.HashedPassword,
			&i.DeepLinkID,
			&i.FirebasePassword,
			&i.Email,
			&i.PhoneNumber,
			&i.FirstName,
			&i.Username,
			&i.LastName,
			&i.DateOfBirth,
			&i.DialCode,
			&i.DialCountry,
			&i.CurrentOptionID,
			&i.Currency,
			&i.DefaultCard,
			&i.DefaultPayoutCard,
			&i.DefaultAccountID,
			&i.IsActive,
			&i.IsDeleted,
			&i.Photo,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
   firebase_password = COALESCE($1, firebase_password),
   email = COALESCE($2, email),
   phone_number = COALESCE($3, phone_number),
   first_name = COALESCE($4, first_name),
   last_name = COALESCE($5, last_name),
   date_of_birth = COALESCE($6, date_of_birth),
   dial_code = COALESCE($7, dial_code),
   dial_country = COALESCE($8, dial_country),
   current_option_id = COALESCE($9, current_option_id),
   currency = COALESCE($10, currency),
   is_active = COALESCE($11, is_active),
   is_deleted = COALESCE($12, is_deleted),
   photo = COALESCE($13, photo),
   default_card = COALESCE($14, default_card),
   default_payout_card = COALESCE($15, default_payout_card),
   default_account_id = COALESCE($16, default_account_id),
   hashed_password = COALESCE($17, hashed_password),
   updated_at = NOW()
WHERE id = $18 
RETURNING id, user_id, firebase_id, public_id, hashed_password, deep_link_id, firebase_password, email, phone_number, first_name, username, last_name, date_of_birth, dial_code, dial_country, current_option_id, currency, default_card, default_payout_card, default_account_id, is_active, is_deleted, photo, password_changed_at, created_at, updated_at
`

type UpdateUserParams struct {
	FirebasePassword  pgtype.Text `json:"firebase_password"`
	Email             pgtype.Text `json:"email"`
	PhoneNumber       pgtype.Text `json:"phone_number"`
	FirstName         pgtype.Text `json:"first_name"`
	LastName          pgtype.Text `json:"last_name"`
	DateOfBirth       pgtype.Date `json:"date_of_birth"`
	DialCode          pgtype.Text `json:"dial_code"`
	DialCountry       pgtype.Text `json:"dial_country"`
	CurrentOptionID   pgtype.Text `json:"current_option_id"`
	Currency          pgtype.Text `json:"currency"`
	IsActive          pgtype.Bool `json:"is_active"`
	IsDeleted         pgtype.Bool `json:"is_deleted"`
	Photo             pgtype.Text `json:"photo"`
	DefaultCard       pgtype.Text `json:"default_card"`
	DefaultPayoutCard pgtype.Text `json:"default_payout_card"`
	DefaultAccountID  pgtype.Text `json:"default_account_id"`
	HashedPassword    pgtype.Text `json:"hashed_password"`
	ID                uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirebasePassword,
		arg.Email,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.DialCode,
		arg.DialCountry,
		arg.CurrentOptionID,
		arg.Currency,
		arg.IsActive,
		arg.IsDeleted,
		arg.Photo,
		arg.DefaultCard,
		arg.DefaultPayoutCard,
		arg.DefaultAccountID,
		arg.HashedPassword,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirebaseID,
		&i.PublicID,
		&i.HashedPassword,
		&i.DeepLinkID,
		&i.FirebasePassword,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.Username,
		&i.LastName,
		&i.DateOfBirth,
		&i.DialCode,
		&i.DialCountry,
		&i.CurrentOptionID,
		&i.Currency,
		&i.DefaultCard,
		&i.DefaultPayoutCard,
		&i.DefaultAccountID,
		&i.IsActive,
		&i.IsDeleted,
		&i.Photo,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

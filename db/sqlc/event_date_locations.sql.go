// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: event_date_locations.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEventDateLocation = `-- name: CreateEventDateLocation :one
INSERT INTO event_date_locations (
        event_date_time_id,
        street,
        city,
        state,
        country,
        postcode,
        geolocation
    )
VALUES (
        $1, $2, $3, $4, $5, $6, $7
    )
RETURNING event_date_time_id, street, city, state, country, postcode, geolocation, created_at, updated_at
`

type CreateEventDateLocationParams struct {
	EventDateTimeID uuid.UUID    `json:"event_date_time_id"`
	Street          string       `json:"street"`
	City            string       `json:"city"`
	State           string       `json:"state"`
	Country         string       `json:"country"`
	Postcode        string       `json:"postcode"`
	Geolocation     pgtype.Point `json:"geolocation"`
}

func (q *Queries) CreateEventDateLocation(ctx context.Context, arg CreateEventDateLocationParams) (EventDateLocation, error) {
	row := q.db.QueryRow(ctx, createEventDateLocation,
		arg.EventDateTimeID,
		arg.Street,
		arg.City,
		arg.State,
		arg.Country,
		arg.Postcode,
		arg.Geolocation,
	)
	var i EventDateLocation
	err := row.Scan(
		&i.EventDateTimeID,
		&i.Street,
		&i.City,
		&i.State,
		&i.Country,
		&i.Postcode,
		&i.Geolocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventDateLocation = `-- name: GetEventDateLocation :one
SELECT event_date_time_id, street, city, state, country, postcode, geolocation, created_at, updated_at
FROM event_date_locations
WHERE event_date_time_id = $1
`

func (q *Queries) GetEventDateLocation(ctx context.Context, eventDateTimeID uuid.UUID) (EventDateLocation, error) {
	row := q.db.QueryRow(ctx, getEventDateLocation, eventDateTimeID)
	var i EventDateLocation
	err := row.Scan(
		&i.EventDateTimeID,
		&i.Street,
		&i.City,
		&i.State,
		&i.Country,
		&i.Postcode,
		&i.Geolocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeEventDateLocation = `-- name: RemoveEventDateLocation :exec
DELETE FROM event_date_locations
WHERE event_date_time_id = $1
`

func (q *Queries) RemoveEventDateLocation(ctx context.Context, eventDateTimeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeEventDateLocation, eventDateTimeID)
	return err
}

const updateEventDateLocation = `-- name: UpdateEventDateLocation :one
UPDATE event_date_locations
SET 
    street = COALESCE($1, street),
    city = COALESCE($2, city),
    state = COALESCE($3, state),
    country = COALESCE($4, country),
    postcode = COALESCE($5, postcode),
    geolocation = COALESCE($6, geolocation),
    updated_at = NOW()
WHERE event_date_time_id = $7 
RETURNING event_date_time_id, street, city, state, country, postcode, geolocation, created_at, updated_at
`

type UpdateEventDateLocationParams struct {
	Street          pgtype.Text  `json:"street"`
	City            pgtype.Text  `json:"city"`
	State           pgtype.Text  `json:"state"`
	Country         pgtype.Text  `json:"country"`
	Postcode        pgtype.Text  `json:"postcode"`
	Geolocation     pgtype.Point `json:"geolocation"`
	EventDateTimeID uuid.UUID    `json:"event_date_time_id"`
}

func (q *Queries) UpdateEventDateLocation(ctx context.Context, arg UpdateEventDateLocationParams) (EventDateLocation, error) {
	row := q.db.QueryRow(ctx, updateEventDateLocation,
		arg.Street,
		arg.City,
		arg.State,
		arg.Country,
		arg.Postcode,
		arg.Geolocation,
		arg.EventDateTimeID,
	)
	var i EventDateLocation
	err := row.Scan(
		&i.EventDateTimeID,
		&i.Street,
		&i.City,
		&i.State,
		&i.Country,
		&i.Postcode,
		&i.Geolocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEventDateLocationTwo = `-- name: UpdateEventDateLocationTwo :one
UPDATE event_date_locations
SET 
    street = $1,
    city = $2,
    state = $3,
    country = $4,
    postcode = $5,
    geolocation = $6,
    updated_at = NOW()
WHERE event_date_time_id = $7
RETURNING event_date_time_id, street, city, state, country, postcode, geolocation, created_at, updated_at
`

type UpdateEventDateLocationTwoParams struct {
	Street          string       `json:"street"`
	City            string       `json:"city"`
	State           string       `json:"state"`
	Country         string       `json:"country"`
	Postcode        string       `json:"postcode"`
	Geolocation     pgtype.Point `json:"geolocation"`
	EventDateTimeID uuid.UUID    `json:"event_date_time_id"`
}

func (q *Queries) UpdateEventDateLocationTwo(ctx context.Context, arg UpdateEventDateLocationTwoParams) (EventDateLocation, error) {
	row := q.db.QueryRow(ctx, updateEventDateLocationTwo,
		arg.Street,
		arg.City,
		arg.State,
		arg.Country,
		arg.Postcode,
		arg.Geolocation,
		arg.EventDateTimeID,
	)
	var i EventDateLocation
	err := row.Scan(
		&i.EventDateTimeID,
		&i.Street,
		&i.City,
		&i.State,
		&i.Country,
		&i.Postcode,
		&i.Geolocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

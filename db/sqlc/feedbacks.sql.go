// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: feedbacks.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFeedback = `-- name: CreateFeedback :exec
INSERT INTO feedbacks (
    user_id,
    subject,
    sub_subject,
    detail
) VALUES ($1, $2, $3, $4)
`

type CreateFeedbackParams struct {
	UserID     uuid.UUID `json:"user_id"`
	Subject    string    `json:"subject"`
	SubSubject string    `json:"sub_subject"`
	Detail     string    `json:"detail"`
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) error {
	_, err := q.db.Exec(ctx, createFeedback,
		arg.UserID,
		arg.Subject,
		arg.SubSubject,
		arg.Detail,
	)
	return err
}

const getFeedback = `-- name: GetFeedback :many
SELECT id, user_id, subject, sub_subject, detail, created_at, updated_at 
FROM feedbacks
WHERE user_id = $1
`

func (q *Queries) GetFeedback(ctx context.Context, userID uuid.UUID) ([]Feedback, error) {
	rows, err := q.db.Query(ctx, getFeedback, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Feedback{}
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Subject,
			&i.SubSubject,
			&i.Detail,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFeedback = `-- name: RemoveFeedback :exec
DELETE 
FROM feedbacks
WHERE id = $1
`

func (q *Queries) RemoveFeedback(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeFeedback, id)
	return err
}

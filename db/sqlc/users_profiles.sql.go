// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users_profiles.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserProfile = `-- name: CreateUserProfile :exec
INSERT INTO users_profiles (
    user_id,
    languages
) VALUES ($1, $2)
`

type CreateUserProfileParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Languages []string  `json:"languages"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) error {
	_, err := q.db.Exec(ctx, createUserProfile, arg.UserID, arg.Languages)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT user_id, work, languages, bio, created_at, updated_at 
FROM users_profiles
WHERE user_id = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, userID uuid.UUID) (UsersProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i UsersProfile
	err := row.Scan(
		&i.UserID,
		&i.Work,
		&i.Languages,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users_profiles 
SET 
    work = COALESCE($1, work),
    bio = COALESCE($2, bio), 
    updated_at = NOW()
WHERE user_id = $3
RETURNING user_id, work, languages, bio, created_at, updated_at
`

type UpdateUserProfileParams struct {
	Work   pgtype.Text `json:"work"`
	Bio    pgtype.Text `json:"bio"`
	UserID uuid.UUID   `json:"user_id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UsersProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile, arg.Work, arg.Bio, arg.UserID)
	var i UsersProfile
	err := row.Scan(
		&i.UserID,
		&i.Work,
		&i.Languages,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfileLang = `-- name: UpdateUserProfileLang :one
UPDATE users_profiles 
SET 
    languages = $1
WHERE user_id = $2
RETURNING user_id, work, languages, bio, created_at, updated_at
`

type UpdateUserProfileLangParams struct {
	Languages []string  `json:"languages"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateUserProfileLang(ctx context.Context, arg UpdateUserProfileLangParams) (UsersProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfileLang, arg.Languages, arg.UserID)
	var i UsersProfile
	err := row.Scan(
		&i.UserID,
		&i.Work,
		&i.Languages,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: options_extra_infos.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOptionExtraInfo = `-- name: CreateOptionExtraInfo :one
INSERT INTO options_extra_infos (
    option_id,
    type,
    info
) VALUES (
    $1, $2, $3
) RETURNING id, option_id, type, info, created_at, updated_at
`

type CreateOptionExtraInfoParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
	Info     string    `json:"info"`
}

func (q *Queries) CreateOptionExtraInfo(ctx context.Context, arg CreateOptionExtraInfoParams) (OptionsExtraInfo, error) {
	row := q.db.QueryRow(ctx, createOptionExtraInfo, arg.OptionID, arg.Type, arg.Info)
	var i OptionsExtraInfo
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Type,
		&i.Info,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionExtraInfo = `-- name: GetOptionExtraInfo :one
SELECT id, option_id, type, info, created_at, updated_at 
FROM options_extra_infos
WHERE option_id = $1 AND type = $2
`

type GetOptionExtraInfoParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
}

func (q *Queries) GetOptionExtraInfo(ctx context.Context, arg GetOptionExtraInfoParams) (OptionsExtraInfo, error) {
	row := q.db.QueryRow(ctx, getOptionExtraInfo, arg.OptionID, arg.Type)
	var i OptionsExtraInfo
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Type,
		&i.Info,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOptionExtraInfoByID = `-- name: GetOptionExtraInfoByID :one
SELECT id, option_id, type, info, created_at, updated_at 
FROM options_extra_infos
WHERE id = $1
`

func (q *Queries) GetOptionExtraInfoByID(ctx context.Context, id uuid.UUID) (OptionsExtraInfo, error) {
	row := q.db.QueryRow(ctx, getOptionExtraInfoByID, id)
	var i OptionsExtraInfo
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Type,
		&i.Info,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeOptionExtraInfo = `-- name: RemoveOptionExtraInfo :exec
DELETE FROM options_extra_infos 
WHERE option_id = $1
`

func (q *Queries) RemoveOptionExtraInfo(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionExtraInfo, optionID)
	return err
}

const updateOptionExtraInfo = `-- name: UpdateOptionExtraInfo :one
UPDATE options_extra_infos
SET 
    info = $1,
    updated_at = NOW()
WHERE option_id = $2 AND type = $3
RETURNING id, option_id, type, info, created_at, updated_at
`

type UpdateOptionExtraInfoParams struct {
	Info     string    `json:"info"`
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
}

func (q *Queries) UpdateOptionExtraInfo(ctx context.Context, arg UpdateOptionExtraInfoParams) (OptionsExtraInfo, error) {
	row := q.db.QueryRow(ctx, updateOptionExtraInfo, arg.Info, arg.OptionID, arg.Type)
	var i OptionsExtraInfo
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Type,
		&i.Info,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: em_contacts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createEmContact = `-- name: CreateEmContact :one
INSERT INTO em_contacts (
    user_id,
    name,
    relationship,
    email,
    dial_code,
    dial_country,
    phone_number,
    language
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING name, id
`

type CreateEmContactParams struct {
	UserID       uuid.UUID `json:"user_id"`
	Name         string    `json:"name"`
	Relationship string    `json:"relationship"`
	Email        string    `json:"email"`
	DialCode     string    `json:"dial_code"`
	DialCountry  string    `json:"dial_country"`
	PhoneNumber  string    `json:"phone_number"`
	Language     string    `json:"language"`
}

type CreateEmContactRow struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) CreateEmContact(ctx context.Context, arg CreateEmContactParams) (CreateEmContactRow, error) {
	row := q.db.QueryRow(ctx, createEmContact,
		arg.UserID,
		arg.Name,
		arg.Relationship,
		arg.Email,
		arg.DialCode,
		arg.DialCountry,
		arg.PhoneNumber,
		arg.Language,
	)
	var i CreateEmContactRow
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const getEmContactByPhone = `-- name: GetEmContactByPhone :one
SELECT id, name
FROM em_contacts
WHERE phone_number = $1
`

type GetEmContactByPhoneRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetEmContactByPhone(ctx context.Context, phoneNumber string) (GetEmContactByPhoneRow, error) {
	row := q.db.QueryRow(ctx, getEmContactByPhone, phoneNumber)
	var i GetEmContactByPhoneRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listEmContact = `-- name: ListEmContact :many
SELECT id, name
FROM em_contacts
WHERE user_id = $1
`

type ListEmContactRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) ListEmContact(ctx context.Context, userID uuid.UUID) ([]ListEmContactRow, error) {
	rows, err := q.db.Query(ctx, listEmContact, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEmContactRow{}
	for rows.Next() {
		var i ListEmContactRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeEmContact = `-- name: RemoveEmContact :exec
DELETE 
FROM em_contacts
WHERE id = $1
`

func (q *Queries) RemoveEmContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeEmContact, id)
	return err
}

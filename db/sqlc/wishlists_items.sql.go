// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: wishlists_items.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createWishlistItem = `-- name: CreateWishlistItem :one
INSERT INTO wishlists_items (
    wishlist_id,
    option_user_id
    )
VALUES (
    $1,
    $2
    )
RETURNING id, wishlist_id, option_user_id, created_at, updated_at
`

type CreateWishlistItemParams struct {
	WishlistID   uuid.UUID `json:"wishlist_id"`
	OptionUserID uuid.UUID `json:"option_user_id"`
}

func (q *Queries) CreateWishlistItem(ctx context.Context, arg CreateWishlistItemParams) (WishlistsItem, error) {
	row := q.db.QueryRow(ctx, createWishlistItem, arg.WishlistID, arg.OptionUserID)
	var i WishlistsItem
	err := row.Scan(
		&i.ID,
		&i.WishlistID,
		&i.OptionUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWishlistItem = `-- name: GetWishlistItem :one
SELECT w_i.option_user_id, w_i.wishlist_id, w_i.id, o_i_p.main_image, o_i_p.images, w.name
FROM wishlists_items w_i
    JOIN options_infos o_i on o_i.option_user_id = w_i.option_user_id
    JOIN options_info_photos o_i_p on o_i.id = o_i_p.option_id
    JOIN wishlists w on w.id = w_i.wishlist_id
WHERE w_i.id = $1 AND w.user_id = $2
LIMIT 1
`

type GetWishlistItemParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

type GetWishlistItemRow struct {
	OptionUserID uuid.UUID `json:"option_user_id"`
	WishlistID   uuid.UUID `json:"wishlist_id"`
	ID           uuid.UUID `json:"id"`
	MainImage    string    `json:"main_image"`
	Images       []string  `json:"images"`
	Name         string    `json:"name"`
}

func (q *Queries) GetWishlistItem(ctx context.Context, arg GetWishlistItemParams) (GetWishlistItemRow, error) {
	row := q.db.QueryRow(ctx, getWishlistItem, arg.ID, arg.UserID)
	var i GetWishlistItemRow
	err := row.Scan(
		&i.OptionUserID,
		&i.WishlistID,
		&i.ID,
		&i.MainImage,
		&i.Images,
		&i.Name,
	)
	return i, err
}

const getWishlistItemByOptionID = `-- name: GetWishlistItemByOptionID :one
SELECT w_i.option_user_id, w_i.wishlist_id, w_i.id, o_i_p.main_image, o_i_p.images, w.name
FROM wishlists_items w_i
    JOIN options_infos o_i on o_i.option_user_id = w_i.option_user_id
    JOIN options_info_photos o_i_p on o_i.id = o_i_p.option_id
    JOIN wishlists w on w.id = w_i.wishlist_id
WHERE w_i.option_user_id = $1 AND w.user_id = $2
LIMIT 1
`

type GetWishlistItemByOptionIDParams struct {
	OptionUserID uuid.UUID `json:"option_user_id"`
	UserID       uuid.UUID `json:"user_id"`
}

type GetWishlistItemByOptionIDRow struct {
	OptionUserID uuid.UUID `json:"option_user_id"`
	WishlistID   uuid.UUID `json:"wishlist_id"`
	ID           uuid.UUID `json:"id"`
	MainImage    string    `json:"main_image"`
	Images       []string  `json:"images"`
	Name         string    `json:"name"`
}

func (q *Queries) GetWishlistItemByOptionID(ctx context.Context, arg GetWishlistItemByOptionIDParams) (GetWishlistItemByOptionIDRow, error) {
	row := q.db.QueryRow(ctx, getWishlistItemByOptionID, arg.OptionUserID, arg.UserID)
	var i GetWishlistItemByOptionIDRow
	err := row.Scan(
		&i.OptionUserID,
		&i.WishlistID,
		&i.ID,
		&i.MainImage,
		&i.Images,
		&i.Name,
	)
	return i, err
}

const getWishlistItemCount = `-- name: GetWishlistItemCount :one
SELECT COUNT(*)
FROM wishlists_items w_i
    JOIN wishlists w on w.id = w_i.wishlist_id
    JOIN options_infos o_i on o_i.option_user_id = w_i.option_user_id
WHERE w_i.wishlist_id = $1 AND w.user_id = $2 AND o_i.main_option_type = $3
`

type GetWishlistItemCountParams struct {
	WishlistID     uuid.UUID `json:"wishlist_id"`
	UserID         uuid.UUID `json:"user_id"`
	MainOptionType string    `json:"main_option_type"`
}

func (q *Queries) GetWishlistItemCount(ctx context.Context, arg GetWishlistItemCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getWishlistItemCount, arg.WishlistID, arg.UserID, arg.MainOptionType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWishlistItemCountAll = `-- name: GetWishlistItemCountAll :one
SELECT COUNT(*)
FROM wishlists_items w_i
    JOIN wishlists w on w.id = w_i.wishlist_id
    JOIN options_infos o_i on o_i.option_user_id = w_i.option_user_id
WHERE w_i.wishlist_id = $1 AND w.user_id = $2
`

type GetWishlistItemCountAllParams struct {
	WishlistID uuid.UUID `json:"wishlist_id"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) GetWishlistItemCountAll(ctx context.Context, arg GetWishlistItemCountAllParams) (int64, error) {
	row := q.db.QueryRow(ctx, getWishlistItemCountAll, arg.WishlistID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listWishlistItem = `-- name: ListWishlistItem :many
SELECT w_i.option_user_id
FROM wishlists_items w_i
    JOIN wishlists w on w.id = w_i.wishlist_id
    JOIN options_infos o_i on o_i.option_user_id = w_i.option_user_id
WHERE w_i.wishlist_id = $1 AND w.user_id = $2 AND o_i.main_option_type = $3
LIMIT $4
OFFSET $5
`

type ListWishlistItemParams struct {
	WishlistID     uuid.UUID `json:"wishlist_id"`
	UserID         uuid.UUID `json:"user_id"`
	MainOptionType string    `json:"main_option_type"`
	Limit          int32     `json:"limit"`
	Offset         int32     `json:"offset"`
}

func (q *Queries) ListWishlistItem(ctx context.Context, arg ListWishlistItemParams) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listWishlistItem,
		arg.WishlistID,
		arg.UserID,
		arg.MainOptionType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var option_user_id uuid.UUID
		if err := rows.Scan(&option_user_id); err != nil {
			return nil, err
		}
		items = append(items, option_user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWishlistItemUser = `-- name: ListWishlistItemUser :many
SELECT w_i.option_user_id, w_i.wishlist_id, w_i.id, o_i_p.main_image, o_i_p.images, w.name
FROM wishlists_items w_i
    JOIN options_infos o_i on o_i.option_user_id = w_i.option_user_id
    JOIN options_info_photos o_i_p on o_i.id = o_i_p.option_id
    JOIN wishlists w on w.id = w_i.wishlist_id
    JOIN users u on u.id = w.user_id
WHERE u.id = $1
`

type ListWishlistItemUserRow struct {
	OptionUserID uuid.UUID `json:"option_user_id"`
	WishlistID   uuid.UUID `json:"wishlist_id"`
	ID           uuid.UUID `json:"id"`
	MainImage    string    `json:"main_image"`
	Images       []string  `json:"images"`
	Name         string    `json:"name"`
}

func (q *Queries) ListWishlistItemUser(ctx context.Context, id uuid.UUID) ([]ListWishlistItemUserRow, error) {
	rows, err := q.db.Query(ctx, listWishlistItemUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWishlistItemUserRow{}
	for rows.Next() {
		var i ListWishlistItemUserRow
		if err := rows.Scan(
			&i.OptionUserID,
			&i.WishlistID,
			&i.ID,
			&i.MainImage,
			&i.Images,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWishlistItem = `-- name: RemoveWishlistItem :exec
DELETE FROM wishlists_items w_i
WHERE w_i.id = $1
`

func (q *Queries) RemoveWishlistItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeWishlistItem, id)
	return err
}

const removeWishlistItemByOptionUserID = `-- name: RemoveWishlistItemByOptionUserID :exec
DELETE FROM wishlists_items
WHERE option_user_id = $1
`

func (q *Queries) RemoveWishlistItemByOptionUserID(ctx context.Context, optionUserID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeWishlistItemByOptionUserID, optionUserID)
	return err
}

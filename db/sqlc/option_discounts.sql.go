// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: option_discounts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOptionDiscount = `-- name: CreateOptionDiscount :one
INSERT INTO option_discounts (
    option_id,
    main_type,
    type,
    percent,
    name,
    extra_type,
    des
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, main_type, type, percent, extra_type, name, des
`

type CreateOptionDiscountParams struct {
	OptionID  uuid.UUID `json:"option_id"`
	MainType  string    `json:"main_type"`
	Type      string    `json:"type"`
	Percent   int32     `json:"percent"`
	Name      string    `json:"name"`
	ExtraType string    `json:"extra_type"`
	Des       string    `json:"des"`
}

type CreateOptionDiscountRow struct {
	ID        uuid.UUID `json:"id"`
	MainType  string    `json:"main_type"`
	Type      string    `json:"type"`
	Percent   int32     `json:"percent"`
	ExtraType string    `json:"extra_type"`
	Name      string    `json:"name"`
	Des       string    `json:"des"`
}

func (q *Queries) CreateOptionDiscount(ctx context.Context, arg CreateOptionDiscountParams) (CreateOptionDiscountRow, error) {
	row := q.db.QueryRow(ctx, createOptionDiscount,
		arg.OptionID,
		arg.MainType,
		arg.Type,
		arg.Percent,
		arg.Name,
		arg.ExtraType,
		arg.Des,
	)
	var i CreateOptionDiscountRow
	err := row.Scan(
		&i.ID,
		&i.MainType,
		&i.Type,
		&i.Percent,
		&i.ExtraType,
		&i.Name,
		&i.Des,
	)
	return i, err
}

const getOptionDiscount = `-- name: GetOptionDiscount :one
SELECT id, main_type, type, percent, extra_type, name, des
FROM option_discounts
WHERE option_id = $1 AND type=$2
`

type GetOptionDiscountParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Type     string    `json:"type"`
}

type GetOptionDiscountRow struct {
	ID        uuid.UUID `json:"id"`
	MainType  string    `json:"main_type"`
	Type      string    `json:"type"`
	Percent   int32     `json:"percent"`
	ExtraType string    `json:"extra_type"`
	Name      string    `json:"name"`
	Des       string    `json:"des"`
}

func (q *Queries) GetOptionDiscount(ctx context.Context, arg GetOptionDiscountParams) (GetOptionDiscountRow, error) {
	row := q.db.QueryRow(ctx, getOptionDiscount, arg.OptionID, arg.Type)
	var i GetOptionDiscountRow
	err := row.Scan(
		&i.ID,
		&i.MainType,
		&i.Type,
		&i.Percent,
		&i.ExtraType,
		&i.Name,
		&i.Des,
	)
	return i, err
}

const listOptionDiscount = `-- name: ListOptionDiscount :many
SELECT id, main_type, type, percent, extra_type, name, des
FROM option_discounts
WHERE option_id = $1
`

type ListOptionDiscountRow struct {
	ID        uuid.UUID `json:"id"`
	MainType  string    `json:"main_type"`
	Type      string    `json:"type"`
	Percent   int32     `json:"percent"`
	ExtraType string    `json:"extra_type"`
	Name      string    `json:"name"`
	Des       string    `json:"des"`
}

func (q *Queries) ListOptionDiscount(ctx context.Context, optionID uuid.UUID) ([]ListOptionDiscountRow, error) {
	rows, err := q.db.Query(ctx, listOptionDiscount, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOptionDiscountRow{}
	for rows.Next() {
		var i ListOptionDiscountRow
		if err := rows.Scan(
			&i.ID,
			&i.MainType,
			&i.Type,
			&i.Percent,
			&i.ExtraType,
			&i.Name,
			&i.Des,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOptionDiscountByMainType = `-- name: ListOptionDiscountByMainType :many
SELECT id, main_type, type, percent, extra_type, name, des
FROM option_discounts
WHERE option_id = $1 AND main_type=$2
`

type ListOptionDiscountByMainTypeParams struct {
	OptionID uuid.UUID `json:"option_id"`
	MainType string    `json:"main_type"`
}

type ListOptionDiscountByMainTypeRow struct {
	ID        uuid.UUID `json:"id"`
	MainType  string    `json:"main_type"`
	Type      string    `json:"type"`
	Percent   int32     `json:"percent"`
	ExtraType string    `json:"extra_type"`
	Name      string    `json:"name"`
	Des       string    `json:"des"`
}

func (q *Queries) ListOptionDiscountByMainType(ctx context.Context, arg ListOptionDiscountByMainTypeParams) ([]ListOptionDiscountByMainTypeRow, error) {
	rows, err := q.db.Query(ctx, listOptionDiscountByMainType, arg.OptionID, arg.MainType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOptionDiscountByMainTypeRow{}
	for rows.Next() {
		var i ListOptionDiscountByMainTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.MainType,
			&i.Type,
			&i.Percent,
			&i.ExtraType,
			&i.Name,
			&i.Des,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOptionDiscount = `-- name: RemoveOptionDiscount :exec
DELETE FROM option_discounts
WHERE id = $1
`

func (q *Queries) RemoveOptionDiscount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionDiscount, id)
	return err
}

const removeOptionDiscountByMainType = `-- name: RemoveOptionDiscountByMainType :exec
DELETE FROM option_discounts
WHERE option_id = $1 AND main_type = $2
`

type RemoveOptionDiscountByMainTypeParams struct {
	OptionID uuid.UUID `json:"option_id"`
	MainType string    `json:"main_type"`
}

func (q *Queries) RemoveOptionDiscountByMainType(ctx context.Context, arg RemoveOptionDiscountByMainTypeParams) error {
	_, err := q.db.Exec(ctx, removeOptionDiscountByMainType, arg.OptionID, arg.MainType)
	return err
}

const removeOptionDiscountByOptionID = `-- name: RemoveOptionDiscountByOptionID :exec
DELETE FROM option_discounts
WHERE option_id = $1
`

func (q *Queries) RemoveOptionDiscountByOptionID(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionDiscountByOptionID, optionID)
	return err
}

const updateOptionDiscount = `-- name: UpdateOptionDiscount :one
UPDATE option_discounts 
SET
    main_type = COALESCE($1, main_type),
    type = COALESCE($2, type),
    percent = COALESCE($3, percent),
    extra_type = COALESCE($4, extra_type),
    name = COALESCE($5, name),
    des = COALESCE($6, des),
    updated_at = NOW()
WHERE id = $7 AND option_id = $7
RETURNING id, main_type, type, percent, extra_type, name, des
`

type UpdateOptionDiscountParams struct {
	MainType  pgtype.Text `json:"main_type"`
	Type      pgtype.Text `json:"type"`
	Percent   pgtype.Int4 `json:"percent"`
	ExtraType pgtype.Text `json:"extra_type"`
	Name      pgtype.Text `json:"name"`
	Des       pgtype.Text `json:"des"`
	ID        uuid.UUID   `json:"id"`
}

type UpdateOptionDiscountRow struct {
	ID        uuid.UUID `json:"id"`
	MainType  string    `json:"main_type"`
	Type      string    `json:"type"`
	Percent   int32     `json:"percent"`
	ExtraType string    `json:"extra_type"`
	Name      string    `json:"name"`
	Des       string    `json:"des"`
}

func (q *Queries) UpdateOptionDiscount(ctx context.Context, arg UpdateOptionDiscountParams) (UpdateOptionDiscountRow, error) {
	row := q.db.QueryRow(ctx, updateOptionDiscount,
		arg.MainType,
		arg.Type,
		arg.Percent,
		arg.ExtraType,
		arg.Name,
		arg.Des,
		arg.ID,
	)
	var i UpdateOptionDiscountRow
	err := row.Scan(
		&i.ID,
		&i.MainType,
		&i.Type,
		&i.Percent,
		&i.ExtraType,
		&i.Name,
		&i.Des,
	)
	return i, err
}

const updateOptionDiscountByType = `-- name: UpdateOptionDiscountByType :one
UPDATE option_discounts 
SET
    main_type = $1,
    type = $2,
    percent = $3,
    updated_at = NOW()
WHERE type = $4 AND option_id = $5 AND main_type = $6
RETURNING id, main_type, type, percent, extra_type, name, des
`

type UpdateOptionDiscountByTypeParams struct {
	MainType   string    `json:"main_type"`
	Type       string    `json:"type"`
	Percent    int32     `json:"percent"`
	Type_2     string    `json:"type_2"`
	OptionID   uuid.UUID `json:"option_id"`
	MainType_2 string    `json:"main_type_2"`
}

type UpdateOptionDiscountByTypeRow struct {
	ID        uuid.UUID `json:"id"`
	MainType  string    `json:"main_type"`
	Type      string    `json:"type"`
	Percent   int32     `json:"percent"`
	ExtraType string    `json:"extra_type"`
	Name      string    `json:"name"`
	Des       string    `json:"des"`
}

func (q *Queries) UpdateOptionDiscountByType(ctx context.Context, arg UpdateOptionDiscountByTypeParams) (UpdateOptionDiscountByTypeRow, error) {
	row := q.db.QueryRow(ctx, updateOptionDiscountByType,
		arg.MainType,
		arg.Type,
		arg.Percent,
		arg.Type_2,
		arg.OptionID,
		arg.MainType_2,
	)
	var i UpdateOptionDiscountByTypeRow
	err := row.Scan(
		&i.ID,
		&i.MainType,
		&i.Type,
		&i.Percent,
		&i.ExtraType,
		&i.Name,
		&i.Des,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: events_infos_category.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createEventInfoCategory = `-- name: CreateEventInfoCategory :one
INSERT INTO events_infos_category (
    option_id,
    event_type,
    highlight,
    event_sub_type,
    des,
    name
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING option_id, event_type, event_sub_type, highlight, des, name, created_at, updated_at
`

type CreateEventInfoCategoryParams struct {
	OptionID     uuid.UUID `json:"option_id"`
	EventType    []string  `json:"event_type"`
	Highlight    []string  `json:"highlight"`
	EventSubType []string  `json:"event_sub_type"`
	Des          []string  `json:"des"`
	Name         []string  `json:"name"`
}

func (q *Queries) CreateEventInfoCategory(ctx context.Context, arg CreateEventInfoCategoryParams) (EventsInfosCategory, error) {
	row := q.db.QueryRow(ctx, createEventInfoCategory,
		arg.OptionID,
		arg.EventType,
		arg.Highlight,
		arg.EventSubType,
		arg.Des,
		arg.Name,
	)
	var i EventsInfosCategory
	err := row.Scan(
		&i.OptionID,
		&i.EventType,
		&i.EventSubType,
		&i.Highlight,
		&i.Des,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventInfoCategory = `-- name: GetEventInfoCategory :one
SELECT option_id, event_type, event_sub_type, highlight, des, name, created_at, updated_at 
FROM events_infos_category
WHERE option_id = $1
`

func (q *Queries) GetEventInfoCategory(ctx context.Context, optionID uuid.UUID) (EventsInfosCategory, error) {
	row := q.db.QueryRow(ctx, getEventInfoCategory, optionID)
	var i EventsInfosCategory
	err := row.Scan(
		&i.OptionID,
		&i.EventType,
		&i.EventSubType,
		&i.Highlight,
		&i.Des,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeEventInfoCategory = `-- name: RemoveEventInfoCategory :exec
DELETE FROM events_infos_category 
WHERE option_id = $1
`

func (q *Queries) RemoveEventInfoCategory(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeEventInfoCategory, optionID)
	return err
}

const updateEventInfoCategory = `-- name: UpdateEventInfoCategory :one
UPDATE events_infos_category
SET 
    event_type = $1,
    event_sub_type = $2,
    highlight = $3,
    des = $4,
    name = $5,
    updated_at = NOW()
WHERE option_id = $6
RETURNING option_id, event_type, event_sub_type, highlight, des, name, created_at, updated_at
`

type UpdateEventInfoCategoryParams struct {
	EventType    []string  `json:"event_type"`
	EventSubType []string  `json:"event_sub_type"`
	Highlight    []string  `json:"highlight"`
	Des          []string  `json:"des"`
	Name         []string  `json:"name"`
	OptionID     uuid.UUID `json:"option_id"`
}

func (q *Queries) UpdateEventInfoCategory(ctx context.Context, arg UpdateEventInfoCategoryParams) (EventsInfosCategory, error) {
	row := q.db.QueryRow(ctx, updateEventInfoCategory,
		arg.EventType,
		arg.EventSubType,
		arg.Highlight,
		arg.Des,
		arg.Name,
		arg.OptionID,
	)
	var i EventsInfosCategory
	err := row.Scan(
		&i.OptionID,
		&i.EventType,
		&i.EventSubType,
		&i.Highlight,
		&i.Des,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

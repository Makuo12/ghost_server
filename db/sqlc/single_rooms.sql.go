// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: single_rooms.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSingleRoom = `-- name: CreateSingleRoom :one
INSERT INTO single_rooms (
    user_one,
    user_two
) VALUES ($1, $2)
RETURNING id
`

type CreateSingleRoomParams struct {
	UserOne uuid.UUID `json:"user_one"`
	UserTwo uuid.UUID `json:"user_two"`
}

func (q *Queries) CreateSingleRoom(ctx context.Context, arg CreateSingleRoomParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSingleRoom, arg.UserOne, arg.UserTwo)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getSingleRoomID = `-- name: GetSingleRoomID :one
SELECT id 
FROM single_rooms
WHERE (user_one = $1 AND user_two = $2) OR (user_one = $3 AND user_two = $4)
`

type GetSingleRoomIDParams struct {
	UserOne   uuid.UUID `json:"user_one"`
	UserTwo   uuid.UUID `json:"user_two"`
	UserOne_2 uuid.UUID `json:"user_one_2"`
	UserTwo_2 uuid.UUID `json:"user_two_2"`
}

func (q *Queries) GetSingleRoomID(ctx context.Context, arg GetSingleRoomIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getSingleRoomID,
		arg.UserOne,
		arg.UserTwo,
		arg.UserOne_2,
		arg.UserTwo_2,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

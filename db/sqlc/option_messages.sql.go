// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: option_messages.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOptionMessage = `-- name: CreateOptionMessage :one
INSERT INTO option_messages (
    option_id,
    user_id,
    message,
    type
) VALUES (
    $1, $2, $3, $4
) RETURNING id, option_id, seen, message, user_id, type
`

type CreateOptionMessageParams struct {
	OptionID uuid.UUID `json:"option_id"`
	UserID   uuid.UUID `json:"user_id"`
	Message  string    `json:"message"`
	Type     string    `json:"type"`
}

type CreateOptionMessageRow struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
	Seen     bool      `json:"seen"`
	Message  string    `json:"message"`
	UserID   uuid.UUID `json:"user_id"`
	Type     string    `json:"type"`
}

func (q *Queries) CreateOptionMessage(ctx context.Context, arg CreateOptionMessageParams) (CreateOptionMessageRow, error) {
	row := q.db.QueryRow(ctx, createOptionMessage,
		arg.OptionID,
		arg.UserID,
		arg.Message,
		arg.Type,
	)
	var i CreateOptionMessageRow
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Seen,
		&i.Message,
		&i.UserID,
		&i.Type,
	)
	return i, err
}

const getOptionMessage = `-- name: GetOptionMessage :one
SELECT id, option_id, seen, message, user_id, type
FROM option_messages
WHERE option_id = $1 AND id = $2
`

type GetOptionMessageParams struct {
	OptionID uuid.UUID `json:"option_id"`
	ID       uuid.UUID `json:"id"`
}

type GetOptionMessageRow struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
	Seen     bool      `json:"seen"`
	Message  string    `json:"message"`
	UserID   uuid.UUID `json:"user_id"`
	Type     string    `json:"type"`
}

func (q *Queries) GetOptionMessage(ctx context.Context, arg GetOptionMessageParams) (GetOptionMessageRow, error) {
	row := q.db.QueryRow(ctx, getOptionMessage, arg.OptionID, arg.ID)
	var i GetOptionMessageRow
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Seen,
		&i.Message,
		&i.UserID,
		&i.Type,
	)
	return i, err
}

const listOptionMessage = `-- name: ListOptionMessage :many
SELECT id, option_id, seen, message, user_id, type
FROM option_messages
WHERE option_id = $1
`

type ListOptionMessageRow struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
	Seen     bool      `json:"seen"`
	Message  string    `json:"message"`
	UserID   uuid.UUID `json:"user_id"`
	Type     string    `json:"type"`
}

func (q *Queries) ListOptionMessage(ctx context.Context, optionID uuid.UUID) ([]ListOptionMessageRow, error) {
	rows, err := q.db.Query(ctx, listOptionMessage, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOptionMessageRow{}
	for rows.Next() {
		var i ListOptionMessageRow
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.Seen,
			&i.Message,
			&i.UserID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOptionMessageBySeen = `-- name: ListOptionMessageBySeen :many
SELECT id, option_id, seen, message, user_id, type
FROM option_messages
WHERE option_id = $1 AND seen=$2
`

type ListOptionMessageBySeenParams struct {
	OptionID uuid.UUID `json:"option_id"`
	Seen     bool      `json:"seen"`
}

type ListOptionMessageBySeenRow struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
	Seen     bool      `json:"seen"`
	Message  string    `json:"message"`
	UserID   uuid.UUID `json:"user_id"`
	Type     string    `json:"type"`
}

func (q *Queries) ListOptionMessageBySeen(ctx context.Context, arg ListOptionMessageBySeenParams) ([]ListOptionMessageBySeenRow, error) {
	rows, err := q.db.Query(ctx, listOptionMessageBySeen, arg.OptionID, arg.Seen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOptionMessageBySeenRow{}
	for rows.Next() {
		var i ListOptionMessageBySeenRow
		if err := rows.Scan(
			&i.ID,
			&i.OptionID,
			&i.Seen,
			&i.Message,
			&i.UserID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllOptionMessage = `-- name: RemoveAllOptionMessage :exec
DELETE FROM option_messages
WHERE option_id = $1
`

func (q *Queries) RemoveAllOptionMessage(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllOptionMessage, optionID)
	return err
}

const removeOptionMessage = `-- name: RemoveOptionMessage :exec
DELETE FROM option_messages
WHERE option_id = $1 AND id = $2
`

type RemoveOptionMessageParams struct {
	OptionID uuid.UUID `json:"option_id"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) RemoveOptionMessage(ctx context.Context, arg RemoveOptionMessageParams) error {
	_, err := q.db.Exec(ctx, removeOptionMessage, arg.OptionID, arg.ID)
	return err
}

const updateOptionMessage = `-- name: UpdateOptionMessage :one
UPDATE option_messages 
SET
    seen = COALESCE($1, seen),
    message = COALESCE($2, message),
    updated_at = NOW()
WHERE id = $3 AND option_id = $3
RETURNING id, option_id, seen, message, user_id, type
`

type UpdateOptionMessageParams struct {
	Seen    pgtype.Bool `json:"seen"`
	Message pgtype.Text `json:"message"`
	ID      uuid.UUID   `json:"id"`
}

type UpdateOptionMessageRow struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
	Seen     bool      `json:"seen"`
	Message  string    `json:"message"`
	UserID   uuid.UUID `json:"user_id"`
	Type     string    `json:"type"`
}

func (q *Queries) UpdateOptionMessage(ctx context.Context, arg UpdateOptionMessageParams) (UpdateOptionMessageRow, error) {
	row := q.db.QueryRow(ctx, updateOptionMessage, arg.Seen, arg.Message, arg.ID)
	var i UpdateOptionMessageRow
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Seen,
		&i.Message,
		&i.UserID,
		&i.Type,
	)
	return i, err
}

const updateOptionMessageByType = `-- name: UpdateOptionMessageByType :one
UPDATE option_messages 
SET
    seen = $1,
    updated_at = NOW()
WHERE option_id
RETURNING id, option_id, seen, message, user_id, type
`

type UpdateOptionMessageByTypeRow struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
	Seen     bool      `json:"seen"`
	Message  string    `json:"message"`
	UserID   uuid.UUID `json:"user_id"`
	Type     string    `json:"type"`
}

func (q *Queries) UpdateOptionMessageByType(ctx context.Context, seen bool) (UpdateOptionMessageByTypeRow, error) {
	row := q.db.QueryRow(ctx, updateOptionMessageByType, seen)
	var i UpdateOptionMessageByTypeRow
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.Seen,
		&i.Message,
		&i.UserID,
		&i.Type,
	)
	return i, err
}

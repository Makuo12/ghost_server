// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: options_infos_status.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOptionInfoStatus = `-- name: CreateOptionInfoStatus :one
INSERT INTO options_infos_status (
    option_id,
    snooze_start_date,
    snooze_end_date
) VALUES (
    $1, $2, $3
) RETURNING status AS option_status
`

type CreateOptionInfoStatusParams struct {
	OptionID        uuid.UUID `json:"option_id"`
	SnoozeStartDate time.Time `json:"snooze_start_date"`
	SnoozeEndDate   time.Time `json:"snooze_end_date"`
}

func (q *Queries) CreateOptionInfoStatus(ctx context.Context, arg CreateOptionInfoStatusParams) (string, error) {
	row := q.db.QueryRow(ctx, createOptionInfoStatus, arg.OptionID, arg.SnoozeStartDate, arg.SnoozeEndDate)
	var option_status string
	err := row.Scan(&option_status)
	return option_status, err
}

const getOptionInfoStatus = `-- name: GetOptionInfoStatus :one
SELECT 
    status AS option_status,
    status_reason,
    snooze_start_date,
    snooze_end_date,
    unlist_reason,
    unlist_des
FROM options_infos_status
WHERE option_id = $1
`

type GetOptionInfoStatusRow struct {
	OptionStatus    string    `json:"option_status"`
	StatusReason    string    `json:"status_reason"`
	SnoozeStartDate time.Time `json:"snooze_start_date"`
	SnoozeEndDate   time.Time `json:"snooze_end_date"`
	UnlistReason    string    `json:"unlist_reason"`
	UnlistDes       string    `json:"unlist_des"`
}

func (q *Queries) GetOptionInfoStatus(ctx context.Context, optionID uuid.UUID) (GetOptionInfoStatusRow, error) {
	row := q.db.QueryRow(ctx, getOptionInfoStatus, optionID)
	var i GetOptionInfoStatusRow
	err := row.Scan(
		&i.OptionStatus,
		&i.StatusReason,
		&i.SnoozeStartDate,
		&i.SnoozeEndDate,
		&i.UnlistReason,
		&i.UnlistDes,
	)
	return i, err
}

const removeOptionInfoStatus = `-- name: RemoveOptionInfoStatus :exec
DELETE FROM options_infos_status
WHERE option_id = $1
`

func (q *Queries) RemoveOptionInfoStatus(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOptionInfoStatus, optionID)
	return err
}

const updateOptionInfoStartStatus = `-- name: UpdateOptionInfoStartStatus :one
UPDATE options_infos_status
SET 
    status = $1,
    updated_at = NOW()
WHERE option_id = $2
RETURNING status AS option_status, status_reason, snooze_start_date, snooze_end_date, unlist_reason, unlist_des
`

type UpdateOptionInfoStartStatusParams struct {
	Status   string    `json:"status"`
	OptionID uuid.UUID `json:"option_id"`
}

type UpdateOptionInfoStartStatusRow struct {
	OptionStatus    string    `json:"option_status"`
	StatusReason    string    `json:"status_reason"`
	SnoozeStartDate time.Time `json:"snooze_start_date"`
	SnoozeEndDate   time.Time `json:"snooze_end_date"`
	UnlistReason    string    `json:"unlist_reason"`
	UnlistDes       string    `json:"unlist_des"`
}

func (q *Queries) UpdateOptionInfoStartStatus(ctx context.Context, arg UpdateOptionInfoStartStatusParams) (UpdateOptionInfoStartStatusRow, error) {
	row := q.db.QueryRow(ctx, updateOptionInfoStartStatus, arg.Status, arg.OptionID)
	var i UpdateOptionInfoStartStatusRow
	err := row.Scan(
		&i.OptionStatus,
		&i.StatusReason,
		&i.SnoozeStartDate,
		&i.SnoozeEndDate,
		&i.UnlistReason,
		&i.UnlistDes,
	)
	return i, err
}

const updateOptionInfoStatus = `-- name: UpdateOptionInfoStatus :one
UPDATE options_infos_status
SET 
    status = $1,
    status_reason = $2,
    snooze_start_date = $3,
    snooze_end_date = $4,
    unlist_reason = $5,
    unlist_des = $6,
    updated_at = NOW()
WHERE option_id = $7
RETURNING status AS option_status, status_reason, snooze_start_date, snooze_end_date, unlist_reason, unlist_des
`

type UpdateOptionInfoStatusParams struct {
	Status          string    `json:"status"`
	StatusReason    string    `json:"status_reason"`
	SnoozeStartDate time.Time `json:"snooze_start_date"`
	SnoozeEndDate   time.Time `json:"snooze_end_date"`
	UnlistReason    string    `json:"unlist_reason"`
	UnlistDes       string    `json:"unlist_des"`
	OptionID        uuid.UUID `json:"option_id"`
}

type UpdateOptionInfoStatusRow struct {
	OptionStatus    string    `json:"option_status"`
	StatusReason    string    `json:"status_reason"`
	SnoozeStartDate time.Time `json:"snooze_start_date"`
	SnoozeEndDate   time.Time `json:"snooze_end_date"`
	UnlistReason    string    `json:"unlist_reason"`
	UnlistDes       string    `json:"unlist_des"`
}

func (q *Queries) UpdateOptionInfoStatus(ctx context.Context, arg UpdateOptionInfoStatusParams) (UpdateOptionInfoStatusRow, error) {
	row := q.db.QueryRow(ctx, updateOptionInfoStatus,
		arg.Status,
		arg.StatusReason,
		arg.SnoozeStartDate,
		arg.SnoozeEndDate,
		arg.UnlistReason,
		arg.UnlistDes,
		arg.OptionID,
	)
	var i UpdateOptionInfoStatusRow
	err := row.Scan(
		&i.OptionStatus,
		&i.StatusReason,
		&i.SnoozeStartDate,
		&i.SnoozeEndDate,
		&i.UnlistReason,
		&i.UnlistDes,
	)
	return i, err
}

const updateOptionInfoStatusOne = `-- name: UpdateOptionInfoStatusOne :one
UPDATE options_infos_status
SET 
    status = COALESCE($1, status),
    status_reason = COALESCE($2, status_reason),
    snooze_start_date = COALESCE($3, snooze_start_date),
    snooze_end_date = COALESCE($4, snooze_end_date),
    unlist_reason = COALESCE($5, unlist_reason),
    unlist_des = COALESCE($6, unlist_des),
    updated_at = NOW()
WHERE option_id = $7 
RETURNING status AS option_status, status_reason, snooze_start_date, snooze_end_date, unlist_reason, unlist_des
`

type UpdateOptionInfoStatusOneParams struct {
	Status          pgtype.Text `json:"status"`
	StatusReason    pgtype.Text `json:"status_reason"`
	SnoozeStartDate pgtype.Date `json:"snooze_start_date"`
	SnoozeEndDate   pgtype.Date `json:"snooze_end_date"`
	UnlistReason    pgtype.Text `json:"unlist_reason"`
	UnlistDes       pgtype.Text `json:"unlist_des"`
	OptionID        uuid.UUID   `json:"option_id"`
}

type UpdateOptionInfoStatusOneRow struct {
	OptionStatus    string    `json:"option_status"`
	StatusReason    string    `json:"status_reason"`
	SnoozeStartDate time.Time `json:"snooze_start_date"`
	SnoozeEndDate   time.Time `json:"snooze_end_date"`
	UnlistReason    string    `json:"unlist_reason"`
	UnlistDes       string    `json:"unlist_des"`
}

func (q *Queries) UpdateOptionInfoStatusOne(ctx context.Context, arg UpdateOptionInfoStatusOneParams) (UpdateOptionInfoStatusOneRow, error) {
	row := q.db.QueryRow(ctx, updateOptionInfoStatusOne,
		arg.Status,
		arg.StatusReason,
		arg.SnoozeStartDate,
		arg.SnoozeEndDate,
		arg.UnlistReason,
		arg.UnlistDes,
		arg.OptionID,
	)
	var i UpdateOptionInfoStatusOneRow
	err := row.Scan(
		&i.OptionStatus,
		&i.StatusReason,
		&i.SnoozeStartDate,
		&i.SnoozeEndDate,
		&i.UnlistReason,
		&i.UnlistDes,
	)
	return i, err
}

const updateSnoozeStatus = `-- name: UpdateSnoozeStatus :exec
UPDATE options_infos_status
SET
    status = 'snooze',
    updated_at = NOW()
WHERE NOW() > snooze_start_date AND status = 'staged'
`

func (q *Queries) UpdateSnoozeStatus(ctx context.Context) error {
	_, err := q.db.Exec(ctx, updateSnoozeStatus)
	return err
}

const updateUnSnoozeStatus = `-- name: UpdateUnSnoozeStatus :exec
UPDATE options_infos_status
SET
    status = 'list',
    updated_at = NOW()
WHERE NOW() > snooze_end_date AND status = 'snooze'
`

func (q *Queries) UpdateUnSnoozeStatus(ctx context.Context) error {
	_, err := q.db.Exec(ctx, updateUnSnoozeStatus)
	return err
}
